buildscript {
  repositories {
    maven {
      url "https://oss.sonatype.org"
    }
    mavenCentral()
  }
}

plugins {
  id 'java-library'
  id 'scala'
  id 'signing'
  id 'maven-publish'
  id 'idea'
  id 'eclipse'
  id 'project-report'
  id 'com.diffplug.spotless' version '6.22.0'
  id 'com.github.johnrengelman.shadow' version '8.1.0'
  id "org.sonarqube" version "4.4.1.3373"
  id 'jacoco'
}

group = 'org.wiremock'

project.ext {
  versions = [
    handlebars     : '4.3.1',
    jetty          : '11.0.18',
    guava          : '32.1.3-jre',
    jackson        : '2.15.3',
    xmlUnit        : '2.9.1',
    jsonUnit       : '2.38.0',
    junitJupiter   : '5.10.0'
  ]
}

configurations {
  standaloneOnly
}

dependencies {
  api platform("org.eclipse.jetty:jetty-bom:$versions.jetty")
  api "org.eclipse.jetty:jetty-server"
  api "org.eclipse.jetty:jetty-servlet"
  api "org.eclipse.jetty:jetty-servlets"
  api "org.eclipse.jetty:jetty-webapp"
  api "org.eclipse.jetty:jetty-proxy"
  api "org.eclipse.jetty.http2:http2-server"
  api "org.eclipse.jetty:jetty-alpn-server"
  api "org.eclipse.jetty:jetty-alpn-java-server"
  api "org.eclipse.jetty:jetty-alpn-java-client"
  api "org.eclipse.jetty:jetty-alpn-client"

  api "com.google.guava:guava:$versions.guava", {
    exclude group: 'com.google.code.findbugs', module: 'jsr305'
  }
  api platform("com.fasterxml.jackson:jackson-bom:$versions.jackson")
  api "com.fasterxml.jackson.core:jackson-core",
      "com.fasterxml.jackson.core:jackson-annotations",
      "com.fasterxml.jackson.core:jackson-databind",
      "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  api "org.apache.httpcomponents.client5:httpclient5:5.2.1"
  api "org.xmlunit:xmlunit-core:$versions.xmlUnit"
  api "org.xmlunit:xmlunit-legacy:$versions.xmlUnit", {
    exclude group: 'junit', module: 'junit'
  }
  api "org.xmlunit:xmlunit-placeholders:$versions.xmlUnit"
  api "net.javacrumbs.json-unit:json-unit-core:$versions.jsonUnit"
  api "com.jayway.jsonpath:json-path:2.8.0", {
    exclude group: 'org.ow2.asm', module: 'asm'
  }
  api "org.ow2.asm:asm:9.6"

  implementation "org.slf4j:slf4j-api:1.7.36"
  standaloneOnly "org.slf4j:slf4j-nop:1.7.36"

  api "net.sf.jopt-simple:jopt-simple:5.0.4"

  compileOnly("junit:junit:4.13.2") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
  }
  compileOnly(platform("org.junit:junit-bom:$versions.junitJupiter"))
  compileOnly("org.junit.jupiter:junit-jupiter")

  api 'org.apache.commons:commons-lang3:3.13.0'
  api "com.github.jknack:handlebars:$versions.handlebars", {
    exclude group: 'org.mozilla', module: 'rhino'
  }
  api("com.github.jknack:handlebars-helpers:$versions.handlebars") {
    exclude group: 'org.mozilla', module: 'rhino'
  }

  api 'commons-fileupload:commons-fileupload:1.5',  {
    exclude group: 'commons-io', module: 'commons-io'
  }
  api "commons-io:commons-io:2.15.0"

  api 'com.networknt:json-schema-validator:1.0.87'

  testImplementation "junit:junit:4.13"
  testImplementation("org.junit.jupiter:junit-jupiter:$versions.junitJupiter")
  testImplementation("org.junit.platform:junit-platform-testkit")
  testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
  testImplementation("org.junit.platform:junit-platform-launcher")
  testImplementation("org.junit.jupiter:junit-jupiter-params")
  testImplementation('org.junit-pioneer:junit-pioneer:2.1.0')

  testImplementation "org.hamcrest:hamcrest-core:2.2"
  testImplementation "org.hamcrest:hamcrest-library:2.2"
  testImplementation 'org.mockito:mockito-core:5.6.0'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
  testImplementation "net.javacrumbs.json-unit:json-unit:$versions.jsonUnit"
  testImplementation "org.skyscreamer:jsonassert:1.2.3"
  testImplementation 'com.toomuchcoding.jsonassert:jsonassert:0.6.2'
  testImplementation 'org.awaitility:awaitility:4.2.0'
  testImplementation "com.googlecode.jarjar:jarjar:1.3"
  testImplementation "commons-io:commons-io:2.15.0"
  testImplementation 'org.scala-lang:scala-library:2.13.12'
  testImplementation 'com.tngtech.archunit:archunit-junit5:0.23.1'

  testImplementation "org.eclipse.jetty:jetty-client"
  testImplementation "org.eclipse.jetty.http2:http2-http-client-transport"
  testRuntimeOnly "org.slf4j:log4j-over-slf4j:2.0.9"
  testRuntimeOnly "ch.qos.logback:logback-classic:1.4.0"
  testRuntimeOnly files('src/test/resources/classpath file source/classpathfiles.zip', 'src/test/resources/classpath-filesource.jar')

  testImplementation ('net.jockx:littleproxy:1.1.3') {
    exclude group: 'com.google.guava', module: 'guava'
    exclude group: 'org.apache.commons', module: 'commons-lang3'
    exclude group: 'org.slf4j', module: 'slf4j-api'
    exclude group: 'io.netty', module: 'netty-all'
  }
  testImplementation "io.netty:netty-all:4.1.99.Final"

  testImplementation files('test-extension/test-extension.jar')

  constraints {
    implementation "net.minidev:json-smart:2.5.0", {
      because 'Pinning this above the transitive version from json-path to get CVE fix'
    }
  }
}

allprojects {
  apply plugin: 'com.diffplug.spotless'
  spotless {
    java {
      target 'src/**/*.java'
      googleJavaFormat('1.17.0')
      licenseHeaderFile "${rootDir}/gradle/spotless.java.license.txt"
      ratchetFrom 'origin/master'
      trimTrailingWhitespace()
      endWithNewline()
      targetExclude '**/Tmp*.java'
    }
    groovyGradle {
      target '**/*.gradle'
      greclipse()
      indentWithSpaces(2)
      trimTrailingWhitespace()
      endWithNewline()
    }
    json {
      target 'src/**/*.json'
      targetExclude '**/tmp*.json', 'src/test/resources/sample.json', 'src/main/resources/swagger/*.json', 'src/test/resources/filesource/subdir/deepfile.json', 'src/test/resources/schema-validation/*.json'
      simple().indentWithSpaces(2)
    }
  }

  tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  ext {
    runningOnCI = System.getenv('CI') == 'true'

    repoUser =     this.hasProperty('sonatypeUser')     ? sonatypeUser : 'default'
    repoPassword = this.hasProperty('sonatypePassword') ? sonatypePassword : 'default'

    pomInfo = {
      name 'WireMock'
      url 'http://wiremock.org'
      scm {
        connection 'https://github.com/wiremock/wiremock.git'
        developerConnection 'https://github.com/wiremock/wiremock.git'
        url 'https://github.com/wiremock/wiremock'
      }
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/license/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
      developers {
        developer {
          id 'tomakehurst'
          name 'Tom Akehurst'
        }
      }
    }
  }

  repositories {
    mavenCentral()
  }

  version = '3.3.1'


  sourceCompatibility = 11
  targetCompatibility = 11

  compileJava {
    options.encoding = 'UTF-8'

    // silences warnings about compiling against `sun` packages
    options.compilerArgs += '-XDenableSunApiLintControl'
    options.compilerArgs += '--add-exports=java.base/sun.security.x509=ALL-UNNAMED'
  }

  compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += '-XDenableSunApiLintControl'
    options.compilerArgs += '--add-exports=java.base/sun.security.x509=ALL-UNNAMED'
  }

  test {
    // Set the timezone for testing somewhere other than my machine to increase the chances of catching timezone bugs
    systemProperty 'user.timezone', 'Australia/Sydney'

    useJUnitPlatform()
    exclude 'ignored/**'

    maxParallelForks = runningOnCI ? 1 : 3

    testLogging {
      events "FAILED", "SKIPPED"
      exceptionFormat "full"
    }
  }

  jacocoTestReport {
    reports {
      xml.required = true
    }
  }
  test.finalizedBy jacocoTestReport

  sonarqube {
    properties {
      property "sonar.projectKey", "wiremock_wiremock"
      property "sonar.organization", "wiremock"
      property "sonar.host.url", "https://sonarcloud.io"
    }
  }

  shadowJar.dependsOn jar
}

java {
  withSourcesJar()
  withJavadocJar()
}

task testJar(type: Jar, dependsOn: testClasses) {
  archiveClassifier.set('tests')
  from sourceSets.test.output
}

final DOCS_DIR = project(':').rootDir.getAbsolutePath() + '/docs-v2'

jar {
  archiveBaseName.set('wiremock')
  manifest {
    attributes("Main-Class": "wiremock.Run")
    attributes("Add-Exports": "java.base/sun.security.x509")
  }
}

shadowJar {
  archiveBaseName.set('wiremock-standalone')
  archiveClassifier.set('')
  configurations = [
    project.configurations.runtimeClasspath,
    project.configurations.standaloneOnly
  ]

  relocate "org.mortbay", 'wiremock.org.mortbay'
  relocate "org.eclipse", 'wiremock.org.eclipse'
  relocate "org.codehaus", 'wiremock.org.codehaus'
  relocate "com.google", 'wiremock.com.google'
  relocate "com.google.thirdparty", 'wiremock.com.google.thirdparty'
  relocate "com.fasterxml.jackson", 'wiremock.com.fasterxml.jackson'
  relocate "org.apache", 'wiremock.org.apache'
  relocate "org.xmlunit", 'wiremock.org.xmlunit'
  relocate "org.hamcrest", 'wiremock.org.hamcrest'
  relocate "org.skyscreamer", 'wiremock.org.skyscreamer'
  relocate "org.json", 'wiremock.org.json'
  relocate "net.minidev", 'wiremock.net.minidev'
  relocate "com.jayway", 'wiremock.com.jayway'
  relocate "org.objectweb", 'wiremock.org.objectweb'
  relocate "org.custommonkey", "wiremock.org.custommonkey"
  relocate "net.javacrumbs", "wiremock.net.javacrumbs"
  relocate "net.sf", "wiremock.net.sf"
  relocate "com.github.jknack", "wiremock.com.github.jknack"
  relocate "org.antlr", "wiremock.org.antlr"
  relocate "jakarta.servlet", "wiremock.jakarta.servlet"
  relocate "org.checkerframework", "wiremock.org.checkerframework"
  relocate "org.hamcrest", "wiremock.org.hamcrest"
  relocate "org.slf4j", "wiremock.org.slf4j"
  relocate "joptsimple", "wiremock.joptsimple"
  exclude 'joptsimple/HelpFormatterMessages.properties'
  relocate "org.yaml", "wiremock.org.yaml"
  relocate "com.ethlo", "wiremock.com.ethlo"
  relocate "com.networknt", "wiremock.com.networknt"

  dependencies {
    exclude(dependency('junit:junit'))
  }

  mergeServiceFiles()

  exclude 'META-INF/maven/**'
  exclude 'module-info.class'
  exclude 'handlebars-*.js'
}

javadoc {
  exclude "**/CertificateAuthority.java"
  options.addStringOption('Xdoclint:none', '-quiet')
}

signing {
  required {
    !version.toString().contains("SNAPSHOT") && (gradle.taskGraph.hasTask("uploadArchives") || gradle.taskGraph.hasTask("publish"))
  }
  sign publishing.publications
}

publishing {
  repositories {
    maven {
      url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
      credentials {
        username repoUser
        password repoPassword
      }
    }

    maven {
      name 'snapshots'
      url 'https://oss.sonatype.org/content/repositories/snapshots'
      credentials {
        username repoUser
        password repoPassword
      }
    }
  }

  getComponents().withType(AdhocComponentWithVariants).each { c ->
    c.withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
      skip()
    }
  }

  publications {
    mavenJava(MavenPublication) { publication ->
      artifactId = "${jar.getArchiveBaseName().get()}"
      from components.java
      artifact testJar

      pom.withXml {
        asNode().appendNode('description', 'A web service test double for all occasions')
        asNode().children().last() + pomInfo
      }
    }

    standaloneJar(MavenPublication) { publication ->
      artifactId = "${jar.getArchiveBaseName().get()}-standalone"
      project.shadow.component(publication)

      artifact sourcesJar
      artifact javadocJar
      artifact testJar

      pom.packaging 'jar'
      pom.withXml {
        asNode().appendNode('description', 'A web service test double for all occasions - standalone edition')
        asNode().children().last() + pomInfo
      }
    }
  }
}

task checkReleasePreconditions {
  doLast {
    def REQUIRED_GIT_BRANCH = 'master'
    def currentGitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    assert currentGitBranch == REQUIRED_GIT_BRANCH, "Must be on the $REQUIRED_GIT_BRANCH branch in order to release to Sonatype"
    assert JavaVersion.current().isJava8(), 'Must use Java 8 when releasing'
  }
}
publish.dependsOn checkReleasePreconditions
project.tasks.publishMavenJavaPublicationToMavenLocal.dependsOn 'signStandaloneJarPublication'
project.tasks.publishStandaloneJarPublicationToMavenLocal.dependsOn 'signMavenJavaPublication'
project.tasks.publishMavenJavaPublicationToMavenRepository.dependsOn 'signStandaloneJarPublication'
project.tasks.publishStandaloneJarPublicationToMavenRepository.dependsOn 'signMavenJavaPublication'

assemble.dependsOn jar, shadowJar

task addGitTag {
  doLast {
    println "git tag ${version}".execute().text
    println "git push origin --tags".execute().text
  }
}

task release {
  dependsOn clean, assemble, publishAllPublicationsToMavenRepository, addGitTag
}

task localRelease {
  dependsOn clean, assemble, publishToMavenLocal
}

task 'bump-beta-version' {
  doLast {
    def filesWithVersion = [
      'build.gradle'                                      : { "version = '${it}" },
      'ui/package.json'                                   : { "\"version\": \"${it}\"" },
      'src/main/resources/swagger/wiremock-admin-api.json': { "\"version\": \"${it}\"" },
      'src/main/resources/swagger/wiremock-admin-api.yaml': {
        "version: ${it}"
      }
    ]

    def currentVersion = project.version
    def nextVersion = "3.0.0-beta-${betaVersion + 1}"

    filesWithVersion.each { fileName, lineWithVersionTemplates ->
      def file = file(fileName)
      def lineWithVersionTemplateList = [lineWithVersionTemplates].flatten()

      lineWithVersionTemplateList.each { lineWithVersionTemplate ->
        def oldLine = lineWithVersionTemplate.call(currentVersion)
        def newLine = lineWithVersionTemplate.call(nextVersion)
        println "Replacing '${oldLine}' with '${newLine}' in ${fileName}"
        file.text = file.text.replace(oldLine, newLine)
      }
    }
  }
}

task 'bump-patch-version' {
  doLast {
    def filesWithVersion = [
      'build.gradle'                                      : { "version = '${it}" },
      'ui/package.json'                                   : { "\"version\": \"${it}\"" },
      'src/main/resources/swagger/wiremock-admin-api.json': { "\"version\": \"${it}\"" },
      'src/main/resources/swagger/wiremock-admin-api.yaml': {
        "version: ${it}"
      }
    ]

    def currentVersion = project.version
    def nextVersion = "${majorVersion}.${minorVersion}.${patchVersion + 1}"

    filesWithVersion.each { fileName, lineWithVersionTemplates ->
      def file = file(fileName)
      def lineWithVersionTemplateList = [lineWithVersionTemplates].flatten()

      lineWithVersionTemplateList.each { lineWithVersionTemplate ->
        def oldLine = lineWithVersionTemplate.call(currentVersion)
        def newLine = lineWithVersionTemplate.call(nextVersion)
        println "Replacing '${oldLine}' with '${newLine}' in ${fileName}"
        file.text = file.text.replace(oldLine, newLine)
      }
    }
  }
}

task 'bump-minor-version' {
  doLast {
    def filesWithVersion = [
      'build.gradle'                                      : { "version = '${it}" },
      'ui/package.json'                                   : { "\"version\": \"${it}\"" },
      'src/main/resources/swagger/wiremock-admin-api.json': { "\"version\": \"${it}\"" },
      'src/main/resources/swagger/wiremock-admin-api.yaml': {
        "version: ${it}"
      }
    ]

    def currentVersion = project.version
    def nextVersion = "${majorVersion}.${minorVersion + 1}.0"

    filesWithVersion.each { fileName, lineWithVersionTemplates ->
      def file = file(fileName)
      def lineWithVersionTemplateList = [lineWithVersionTemplates].flatten()

      lineWithVersionTemplateList.each { lineWithVersionTemplate ->
        def oldLine = lineWithVersionTemplate.call(currentVersion)
        def newLine = lineWithVersionTemplate.call(nextVersion)
        println "Replacing '${oldLine}' with '${newLine}' in ${fileName}"
        file.text = file.text.replace(oldLine, newLine)
      }
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs.addAll([
    "--add-exports",
    "java.base/sun.security.x509=ALL-UNNAMED"
  ])
}

eclipse.classpath.file {
  whenMerged {
    entries.find{ it.path ==~ '.*JRE_CONTAINER.*' }.each {
      it.entryAttributes['module'] = true
      it.entryAttributes['add-exports'] = 'java.base/sun.security.x509=ALL-UNNAMED'
    }
  }
}

int getMajorVersion() {
  Integer.valueOf(project.version.substring(0, project.version.indexOf('.')))
}

int getMinorVersion() {
  Integer.valueOf(project.version.substring(project.version.indexOf('.') + 1, project.version.lastIndexOf('.')))
}

int getPatchVersion() {
  Integer.valueOf(project.version.substring(project.version.lastIndexOf('.') + 1))
}

int getBetaVersion() {
  Integer.valueOf(project.version.substring(project.version.lastIndexOf('-') + 1))
}

wrapper {
  gradleVersion = '7.2'
  distributionType = Wrapper.DistributionType.BIN
}
