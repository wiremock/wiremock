{
  "components": {
    "requestBodies": {
      "stubMapping": {"content": {"application/json": {
        "schema": {
          "type": "object",
          "properties": {
            "request": {
              "type": "object",
              "properties": {
                "headers": {
                  "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                  "type": "object"
                },
                "method": {
                  "description": "The HTTP request method e.g. GET",
                  "type": "string"
                },
                "queryParameters": {
                  "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                  "type": "object"
                },
                "basicAuthCredentials": {
                  "description": "Pre-emptive basic auth credentials to match against",
                  "type": "object",
                  "properties": {
                    "password": {"type": "string"},
                    "username": {"type": "string"}
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                },
                "bodyPatterns": {
                  "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                  "type": "array",
                  "items": {"type": "object"}
                },
                "urlPattern": {
                  "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                  "type": "string"
                },
                "urlPath": {
                  "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                  "type": "string"
                },
                "urlPathPattern": {
                  "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                  "type": "string"
                },
                "url": {
                  "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                  "type": "string"
                },
                "cookies": {
                  "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                  "type": "object"
                }
              },
              "example": {
                "headers": {"Content-Type": {"equalTo": "application/json"}},
                "method": "POST",
                "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                "url": "/some/thing"
              }
            },
            "metadata": {
              "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
              "type": "object"
            },
            "newScenarioState": {
              "description": "The new state for the scenario to be updated to after this stub is served.",
              "type": "string"
            },
            "response": {"allOf": [
              {"oneOf": [
                {
                  "description": "Log normal randomly distributed response delay.",
                  "title": "Log normal",
                  "type": "object",
                  "properties": {
                    "sigma": {"type": "number"},
                    "median": {"type": "integer"},
                    "type": {
                      "type": "string",
                      "enum": ["lognormal"]
                    }
                  }
                },
                {
                  "description": "Uniformly distributed random response delay.",
                  "title": "Uniform",
                  "type": "object",
                  "properties": {
                    "lower": {"type": "integer"},
                    "upper": {"type": "integer"},
                    "type": {
                      "type": "string",
                      "enum": ["uniform"]
                    }
                  }
                }
              ]},
              {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Map of response headers to send",
                    "type": "object"
                  },
                  "transformers": {
                    "description": "List of names of transformers to apply to this response.",
                    "type": "array",
                    "items": {"type": "string"}
                  },
                  "fixedDelayMilliseconds": {
                    "description": "Number of milliseconds to delay be before sending the response.",
                    "type": "integer"
                  },
                  "fault": {
                    "description": "The fault to apply (instead of a full, valid response).",
                    "type": "string",
                    "enum": [
                      "CONNECTION_RESET_BY_PEER",
                      "EMPTY_RESPONSE",
                      "MALFORMED_RESPONSE_CHUNK",
                      "RANDOM_DATA_THEN_CLOSE"
                    ]
                  },
                  "jsonBody": {
                    "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                    "type": "object"
                  },
                  "body": {
                    "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                    "type": "string"
                  },
                  "fromConfiguredStub": {
                    "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                    "type": "boolean"
                  },
                  "statusMessage": {
                    "description": "The HTTP status message to be returned",
                    "type": "string"
                  },
                  "additionalProxyRequestHeaders": {
                    "description": "Extra request headers to send when proxying to another host.",
                    "type": "object"
                  },
                  "transformerParameters": {
                    "description": "Parameters to apply to response transformers.",
                    "type": "object"
                  },
                  "bodyFileName": {
                    "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                    "type": "string"
                  },
                  "base64Body": {
                    "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                    "type": "string"
                  },
                  "status": {
                    "description": "The HTTP status code to be returned",
                    "type": "integer"
                  },
                  "proxyBaseUrl": {
                    "description": "The base URL of the target to proxy matching requests to.",
                    "type": "string"
                  }
                }
              }
            ]},
            "name": {
              "description": "The stub mapping's name",
              "type": "string"
            },
            "postServeActions": {
              "description": "A map of the names of post serve action extensions to trigger and their parameters.",
              "type": "object"
            },
            "requiredScenarioState": {
              "description": "The required state of the scenario in order for this stub to be matched.",
              "type": "string"
            },
            "id": {
              "description": "This stub mapping's unique identifier",
              "type": "string"
            },
            "persistent": {
              "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
              "type": "boolean"
            },
            "priority": {
              "description": "This stub mapping's priority relative to others. 1 is highest.",
              "type": "integer",
              "minimum": 1
            },
            "uuid": {
              "description": "Alias for the id",
              "type": "string"
            },
            "scenarioName": {
              "description": "The name of the scenario that this stub mapping is part of",
              "type": "string"
            }
          }
        },
        "example": {
          "request": {
            "method": "GET",
            "url": "/some/thing"
          },
          "response": {
            "headers": {"Content-Type": "text/plain"},
            "body": "Hello world!",
            "status": 200
          }
        }
      }}},
      "startRecording": {
        "required": true,
        "content": {"application/json": {
          "schema": {"allOf": [
            {
              "type": "object",
              "properties": {
                "extractBodyCriteria": {
                  "description": "Criteria for extracting response bodies to a separate file instead of including it in the stub mapping",
                  "type": "object",
                  "properties": {
                    "binarySizeThreshold": {
                      "default": "0",
                      "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                      "type": "string",
                      "example": "18.2 GB"
                    },
                    "textSizeThreshold": {
                      "default": "0",
                      "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                      "type": "string",
                      "example": "18.2 GB"
                    }
                  },
                  "example": [{
                    "binarySizeThreshold": "1 Mb",
                    "textSizeThreshold": "2 kb"
                  }]
                },
                "transformers": {
                  "description": "Parameters to pass to stub mapping transformers",
                  "type": "array",
                  "items": {"type": "string"}
                },
                "captureHeaders": {
                  "description": "Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \"caseInsensitive\", which defaults to false",
                  "additionalProperties": {
                    "additionalProperties": false,
                    "type": "object",
                    "properties": {"caseInsensitive": {"type": "boolean"}}
                  },
                  "type": "object",
                  "example": {
                    "Accept": {},
                    "Content-Type": {"caseInsensitive": true}
                  }
                },
                "repeatsAsScenarios": {
                  "default": true,
                  "description": "When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded",
                  "type": "boolean"
                },
                "requestBodyPattern": {
                  "oneOf": [
                    {
                      "description": "Automatically determine matcher based on content type (the default)",
                      "type": "object",
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "description": "If equalTo is used, match body use case-insensitive string comparison",
                          "type": "boolean"
                        },
                        "matcher": {
                          "type": "string",
                          "enum": ["auto"]
                        },
                        "ignoreExtraElements": {
                          "default": true,
                          "description": "If equalToJson is used, matcher ignores extra elements in objects",
                          "type": "boolean"
                        },
                        "ignoreArrayOrder": {
                          "default": true,
                          "description": "If equalToJson is used, ignore order of array elements",
                          "type": "boolean"
                        }
                      }
                    },
                    {
                      "description": "Always match request bodies using equalTo",
                      "type": "object",
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "description": "Match body using case-insensitive string comparison",
                          "type": "boolean"
                        },
                        "matcher": {
                          "type": "string",
                          "enum": ["equalTo"]
                        }
                      }
                    },
                    {
                      "description": "Always match request bodies using equalToJson",
                      "type": "object",
                      "properties": {
                        "matcher": {
                          "type": "string",
                          "enum": ["equalToJson"]
                        },
                        "ignoreExtraElements": {
                          "default": true,
                          "description": "Ignore extra elements in objects",
                          "type": "boolean"
                        },
                        "ignoreArrayOrder": {
                          "default": true,
                          "description": "Ignore order of array elements",
                          "type": "boolean"
                        }
                      }
                    },
                    {
                      "description": "Always match request bodies using equalToXml",
                      "type": "object",
                      "properties": {"matcher": {
                        "type": "string",
                        "enum": ["equalToXml"]
                      }}
                    }
                  ],
                  "description": "Control the request body matcher used in generated stub mappings",
                  "type": "object"
                },
                "transformerParameters": {
                  "description": "List of names of stub mappings transformers to apply to generated stubs",
                  "type": "object"
                },
                "persist": {
                  "default": true,
                  "description": "Whether to save stub mappings to the file system or just return them",
                  "type": "boolean"
                }
              }
            },
            {"properties": {
              "targetBaseUrl": {
                "description": "Target URL when using the record and playback API",
                "type": "string",
                "example": "http://example.mocklab.io"
              },
              "filters": {"allOf": [
                {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    },
                    "method": {
                      "description": "The HTTP request method e.g. GET",
                      "type": "string"
                    },
                    "queryParameters": {
                      "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    },
                    "basicAuthCredentials": {
                      "description": "Pre-emptive basic auth credentials to match against",
                      "type": "object",
                      "properties": {
                        "password": {"type": "string"},
                        "username": {"type": "string"}
                      },
                      "required": [
                        "username",
                        "password"
                      ]
                    },
                    "bodyPatterns": {
                      "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "array",
                      "items": {"type": "object"}
                    },
                    "urlPattern": {
                      "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "urlPath": {
                      "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "urlPathPattern": {
                      "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "cookies": {
                      "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    }
                  },
                  "example": {
                    "headers": {"Content-Type": {"equalTo": "application/json"}},
                    "method": "POST",
                    "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                    "url": "/some/thing"
                  }
                },
                {"description": "Filter requests for which to create stub mapping"}
              ]}
            }}
          ]},
          "example": {
            "extractBodyCriteria": {
              "binarySizeThreshold": "10240",
              "textSizeThreshold": "2048"
            },
            "targetBaseUrl": "http://example.mocklab.io",
            "transformers": ["modify-response-header"],
            "captureHeaders": {
              "Accept": {},
              "Content-Type": {"caseInsensitive": true}
            },
            "repeatsAsScenarios": false,
            "requestBodyPattern": {
              "matcher": "equalToJson",
              "ignoreExtraElements": true,
              "ignoreArrayOrder": false
            },
            "transformerParameters": {"headerValue": "123"},
            "filters": {
              "method": "GET",
              "urlPathPattern": "/api/.*"
            },
            "persist": false
          }
        }}
      },
      "requestPattern": {
        "required": true,
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "method": {
                "description": "The HTTP request method e.g. GET",
                "type": "string"
              },
              "queryParameters": {
                "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "basicAuthCredentials": {
                "description": "Pre-emptive basic auth credentials to match against",
                "type": "object",
                "properties": {
                  "password": {"type": "string"},
                  "username": {"type": "string"}
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "bodyPatterns": {
                "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "array",
                "items": {"type": "object"}
              },
              "urlPattern": {
                "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPath": {
                "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPathPattern": {
                "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "url": {
                "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "cookies": {
                "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              }
            },
            "example": {
              "headers": {"Content-Type": {"equalTo": "application/json"}},
              "method": "POST",
              "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
              "url": "/some/thing"
            }
          },
          "example": {
            "headers": {"Content-Type": {"matches": ".*/xml"}},
            "method": "POST",
            "url": "/resource"
          }
        }}
      },
      "snapshotRecording": {
        "required": true,
        "content": {"application/json": {
          "schema": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "extractBodyCriteria": {
                    "description": "Criteria for extracting response bodies to a separate file instead of including it in the stub mapping",
                    "type": "object",
                    "properties": {
                      "binarySizeThreshold": {
                        "default": "0",
                        "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                        "type": "string",
                        "example": "18.2 GB"
                      },
                      "textSizeThreshold": {
                        "default": "0",
                        "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                        "type": "string",
                        "example": "18.2 GB"
                      }
                    },
                    "example": [{
                      "binarySizeThreshold": "1 Mb",
                      "textSizeThreshold": "2 kb"
                    }]
                  },
                  "transformers": {
                    "description": "Parameters to pass to stub mapping transformers",
                    "type": "array",
                    "items": {"type": "string"}
                  },
                  "captureHeaders": {
                    "description": "Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \"caseInsensitive\", which defaults to false",
                    "additionalProperties": {
                      "additionalProperties": false,
                      "type": "object",
                      "properties": {"caseInsensitive": {"type": "boolean"}}
                    },
                    "type": "object",
                    "example": {
                      "Accept": {},
                      "Content-Type": {"caseInsensitive": true}
                    }
                  },
                  "repeatsAsScenarios": {
                    "default": true,
                    "description": "When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded",
                    "type": "boolean"
                  },
                  "requestBodyPattern": {
                    "oneOf": [
                      {
                        "description": "Automatically determine matcher based on content type (the default)",
                        "type": "object",
                        "properties": {
                          "caseInsensitive": {
                            "default": false,
                            "description": "If equalTo is used, match body use case-insensitive string comparison",
                            "type": "boolean"
                          },
                          "matcher": {
                            "type": "string",
                            "enum": ["auto"]
                          },
                          "ignoreExtraElements": {
                            "default": true,
                            "description": "If equalToJson is used, matcher ignores extra elements in objects",
                            "type": "boolean"
                          },
                          "ignoreArrayOrder": {
                            "default": true,
                            "description": "If equalToJson is used, ignore order of array elements",
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "Always match request bodies using equalTo",
                        "type": "object",
                        "properties": {
                          "caseInsensitive": {
                            "default": false,
                            "description": "Match body using case-insensitive string comparison",
                            "type": "boolean"
                          },
                          "matcher": {
                            "type": "string",
                            "enum": ["equalTo"]
                          }
                        }
                      },
                      {
                        "description": "Always match request bodies using equalToJson",
                        "type": "object",
                        "properties": {
                          "matcher": {
                            "type": "string",
                            "enum": ["equalToJson"]
                          },
                          "ignoreExtraElements": {
                            "default": true,
                            "description": "Ignore extra elements in objects",
                            "type": "boolean"
                          },
                          "ignoreArrayOrder": {
                            "default": true,
                            "description": "Ignore order of array elements",
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "Always match request bodies using equalToXml",
                        "type": "object",
                        "properties": {"matcher": {
                          "type": "string",
                          "enum": ["equalToXml"]
                        }}
                      }
                    ],
                    "description": "Control the request body matcher used in generated stub mappings",
                    "type": "object"
                  },
                  "transformerParameters": {
                    "description": "List of names of stub mappings transformers to apply to generated stubs",
                    "type": "object"
                  },
                  "persist": {
                    "default": true,
                    "description": "Whether to save stub mappings to the file system or just return them",
                    "type": "boolean"
                  }
                }
              },
              {"properties": {"filters": {
                "allOf": [
                  {
                    "description": "Filter requests for which to create stub mapping",
                    "type": "object",
                    "properties": {"ids": {
                      "type": "array",
                      "items": {"type": "string"}
                    }}
                  },
                  {
                    "type": "object",
                    "properties": {
                      "headers": {
                        "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "method": {
                        "description": "The HTTP request method e.g. GET",
                        "type": "string"
                      },
                      "queryParameters": {
                        "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "basicAuthCredentials": {
                        "description": "Pre-emptive basic auth credentials to match against",
                        "type": "object",
                        "properties": {
                          "password": {"type": "string"},
                          "username": {"type": "string"}
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      },
                      "bodyPatterns": {
                        "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "array",
                        "items": {"type": "object"}
                      },
                      "urlPattern": {
                        "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPath": {
                        "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPathPattern": {
                        "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "url": {
                        "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "cookies": {
                        "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      }
                    },
                    "example": {
                      "headers": {"Content-Type": {"equalTo": "application/json"}},
                      "method": "POST",
                      "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                      "url": "/some/thing"
                    }
                  }
                ],
                "type": "object"
              }}}
            ],
            "type": "object"
          },
          "example": {
            "extractBodyCriteria": {
              "binarySizeThreshold": "1 Mb",
              "textSizeThreshold": "2 kb"
            },
            "transformers": ["modify-response-header"],
            "captureHeaders": {
              "Accept": {},
              "Content-Type": {"caseInsensitive": true}
            },
            "repeatsAsScenarios": false,
            "requestBodyPattern": {
              "matcher": "equalToJson",
              "ignoreExtraElements": true,
              "ignoreArrayOrder": false
            },
            "transformerParameters": {"headerValue": "123"},
            "filters": {
              "method": "GET",
              "ids": ["40a93c4a-d378-4e07-8321-6158d5dbcb29"],
              "urlPathPattern": "/api/.*"
            },
            "persist": false,
            "outputFormat": "FULL"
          }
        }}
      }
    },
    "responses": {
      "stubMapping": {
        "description": "The stub mapping",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "request": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  },
                  "method": {
                    "description": "The HTTP request method e.g. GET",
                    "type": "string"
                  },
                  "queryParameters": {
                    "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  },
                  "basicAuthCredentials": {
                    "description": "Pre-emptive basic auth credentials to match against",
                    "type": "object",
                    "properties": {
                      "password": {"type": "string"},
                      "username": {"type": "string"}
                    },
                    "required": [
                      "username",
                      "password"
                    ]
                  },
                  "bodyPatterns": {
                    "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "array",
                    "items": {"type": "object"}
                  },
                  "urlPattern": {
                    "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "urlPath": {
                    "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "urlPathPattern": {
                    "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "url": {
                    "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "cookies": {
                    "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  }
                },
                "example": {
                  "headers": {"Content-Type": {"equalTo": "application/json"}},
                  "method": "POST",
                  "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                  "url": "/some/thing"
                }
              },
              "metadata": {
                "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                "type": "object"
              },
              "newScenarioState": {
                "description": "The new state for the scenario to be updated to after this stub is served.",
                "type": "string"
              },
              "response": {"allOf": [
                {"oneOf": [
                  {
                    "description": "Log normal randomly distributed response delay.",
                    "title": "Log normal",
                    "type": "object",
                    "properties": {
                      "sigma": {"type": "number"},
                      "median": {"type": "integer"},
                      "type": {
                        "type": "string",
                        "enum": ["lognormal"]
                      }
                    }
                  },
                  {
                    "description": "Uniformly distributed random response delay.",
                    "title": "Uniform",
                    "type": "object",
                    "properties": {
                      "lower": {"type": "integer"},
                      "upper": {"type": "integer"},
                      "type": {
                        "type": "string",
                        "enum": ["uniform"]
                      }
                    }
                  }
                ]},
                {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "description": "Map of response headers to send",
                      "type": "object"
                    },
                    "transformers": {
                      "description": "List of names of transformers to apply to this response.",
                      "type": "array",
                      "items": {"type": "string"}
                    },
                    "fixedDelayMilliseconds": {
                      "description": "Number of milliseconds to delay be before sending the response.",
                      "type": "integer"
                    },
                    "fault": {
                      "description": "The fault to apply (instead of a full, valid response).",
                      "type": "string",
                      "enum": [
                        "CONNECTION_RESET_BY_PEER",
                        "EMPTY_RESPONSE",
                        "MALFORMED_RESPONSE_CHUNK",
                        "RANDOM_DATA_THEN_CLOSE"
                      ]
                    },
                    "jsonBody": {
                      "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "object"
                    },
                    "body": {
                      "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "fromConfiguredStub": {
                      "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                      "type": "boolean"
                    },
                    "statusMessage": {
                      "description": "The HTTP status message to be returned",
                      "type": "string"
                    },
                    "additionalProxyRequestHeaders": {
                      "description": "Extra request headers to send when proxying to another host.",
                      "type": "object"
                    },
                    "transformerParameters": {
                      "description": "Parameters to apply to response transformers.",
                      "type": "object"
                    },
                    "bodyFileName": {
                      "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "base64Body": {
                      "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The HTTP status code to be returned",
                      "type": "integer"
                    },
                    "proxyBaseUrl": {
                      "description": "The base URL of the target to proxy matching requests to.",
                      "type": "string"
                    }
                  }
                }
              ]},
              "name": {
                "description": "The stub mapping's name",
                "type": "string"
              },
              "postServeActions": {
                "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                "type": "object"
              },
              "requiredScenarioState": {
                "description": "The required state of the scenario in order for this stub to be matched.",
                "type": "string"
              },
              "id": {
                "description": "This stub mapping's unique identifier",
                "type": "string"
              },
              "persistent": {
                "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                "type": "boolean"
              },
              "priority": {
                "description": "This stub mapping's priority relative to others. 1 is highest.",
                "type": "integer",
                "minimum": 1
              },
              "uuid": {
                "description": "Alias for the id",
                "type": "string"
              },
              "scenarioName": {
                "description": "The name of the scenario that this stub mapping is part of",
                "type": "string"
              }
            }
          },
          "example": {
            "request": {
              "headers": {"Accept": {"equalTo": "text/plain"}},
              "method": "GET",
              "url": "/some/thing"
            },
            "response": {
              "headers": {"Content-Type": "text/plain"},
              "body": "Hello world!",
              "status": 200
            },
            "id": "76ada7b0-49ae-4229-91c4-396a36f18e09",
            "priority": 3
          }
        }}
      },
      "nearMisses": {
        "description": "Near misses matching criteria",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {"nearMisses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {
                      "Connection": "keep-alive",
                      "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                      "Host": "localhost:56738"
                    }
                  },
                  "method": {
                    "description": "The HTTP request method",
                    "type": "string",
                    "example": "GET"
                  },
                  "absoluteUrl": {
                    "description": "The full URL to match against",
                    "type": "string",
                    "example": "http://localhost:56738/received-request/2"
                  },
                  "body": {
                    "description": "Body string to match against",
                    "type": "string",
                    "example": "Hello world"
                  },
                  "url": {
                    "description": "The path and query to match exactly against",
                    "type": "string",
                    "example": "/received-request/2"
                  },
                  "cookies": {
                    "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {}
                  }
                }
              }
            }}
          },
          "example": {"nearMisses": [{
            "request": {
              "headers": {
                "Accept": "*/*",
                "User-Agent": "curl/7.30.0",
                "Host": "localhost:8080"
              },
              "method": "GET",
              "browserProxyRequest": false,
              "loggedDateString": "2016-07-01T19:47:44Z",
              "absoluteUrl": "http://localhost:8080/nomatch",
              "clientIp": "0:0:0:0:0:0:0:1",
              "bodyAsBase64": "",
              "body": "",
              "loggedDate": 1467402464520,
              "url": "/nomatch",
              "cookies": {}
            },
            "requestPattern": {
              "method": "GET",
              "url": "/almostmatch"
            },
            "matchResult": {"distance": 0.06944444444444445}
          }]}
        }}
      }
    }
  },
  "servers": [{"url": "/"}],
  "openapi": "3.0.0",
  "paths": {
    "/__admin/recordings/start": {"post": {
      "summary": "Start recording",
      "requestBody": {
        "required": true,
        "content": {"application/json": {
          "schema": {"allOf": [
            {
              "type": "object",
              "properties": {
                "extractBodyCriteria": {
                  "description": "Criteria for extracting response bodies to a separate file instead of including it in the stub mapping",
                  "type": "object",
                  "properties": {
                    "binarySizeThreshold": {
                      "default": "0",
                      "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                      "type": "string",
                      "example": "18.2 GB"
                    },
                    "textSizeThreshold": {
                      "default": "0",
                      "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                      "type": "string",
                      "example": "18.2 GB"
                    }
                  },
                  "example": [{
                    "binarySizeThreshold": "1 Mb",
                    "textSizeThreshold": "2 kb"
                  }]
                },
                "transformers": {
                  "description": "Parameters to pass to stub mapping transformers",
                  "type": "array",
                  "items": {"type": "string"}
                },
                "captureHeaders": {
                  "description": "Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \"caseInsensitive\", which defaults to false",
                  "additionalProperties": {
                    "additionalProperties": false,
                    "type": "object",
                    "properties": {"caseInsensitive": {"type": "boolean"}}
                  },
                  "type": "object",
                  "example": {
                    "Accept": {},
                    "Content-Type": {"caseInsensitive": true}
                  }
                },
                "repeatsAsScenarios": {
                  "default": true,
                  "description": "When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded",
                  "type": "boolean"
                },
                "requestBodyPattern": {
                  "oneOf": [
                    {
                      "description": "Automatically determine matcher based on content type (the default)",
                      "type": "object",
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "description": "If equalTo is used, match body use case-insensitive string comparison",
                          "type": "boolean"
                        },
                        "matcher": {
                          "type": "string",
                          "enum": ["auto"]
                        },
                        "ignoreExtraElements": {
                          "default": true,
                          "description": "If equalToJson is used, matcher ignores extra elements in objects",
                          "type": "boolean"
                        },
                        "ignoreArrayOrder": {
                          "default": true,
                          "description": "If equalToJson is used, ignore order of array elements",
                          "type": "boolean"
                        }
                      }
                    },
                    {
                      "description": "Always match request bodies using equalTo",
                      "type": "object",
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "description": "Match body using case-insensitive string comparison",
                          "type": "boolean"
                        },
                        "matcher": {
                          "type": "string",
                          "enum": ["equalTo"]
                        }
                      }
                    },
                    {
                      "description": "Always match request bodies using equalToJson",
                      "type": "object",
                      "properties": {
                        "matcher": {
                          "type": "string",
                          "enum": ["equalToJson"]
                        },
                        "ignoreExtraElements": {
                          "default": true,
                          "description": "Ignore extra elements in objects",
                          "type": "boolean"
                        },
                        "ignoreArrayOrder": {
                          "default": true,
                          "description": "Ignore order of array elements",
                          "type": "boolean"
                        }
                      }
                    },
                    {
                      "description": "Always match request bodies using equalToXml",
                      "type": "object",
                      "properties": {"matcher": {
                        "type": "string",
                        "enum": ["equalToXml"]
                      }}
                    }
                  ],
                  "description": "Control the request body matcher used in generated stub mappings",
                  "type": "object"
                },
                "transformerParameters": {
                  "description": "List of names of stub mappings transformers to apply to generated stubs",
                  "type": "object"
                },
                "persist": {
                  "default": true,
                  "description": "Whether to save stub mappings to the file system or just return them",
                  "type": "boolean"
                }
              }
            },
            {"properties": {
              "targetBaseUrl": {
                "description": "Target URL when using the record and playback API",
                "type": "string",
                "example": "http://example.mocklab.io"
              },
              "filters": {"allOf": [
                {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    },
                    "method": {
                      "description": "The HTTP request method e.g. GET",
                      "type": "string"
                    },
                    "queryParameters": {
                      "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    },
                    "basicAuthCredentials": {
                      "description": "Pre-emptive basic auth credentials to match against",
                      "type": "object",
                      "properties": {
                        "password": {"type": "string"},
                        "username": {"type": "string"}
                      },
                      "required": [
                        "username",
                        "password"
                      ]
                    },
                    "bodyPatterns": {
                      "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "array",
                      "items": {"type": "object"}
                    },
                    "urlPattern": {
                      "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "urlPath": {
                      "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "urlPathPattern": {
                      "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "cookies": {
                      "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    }
                  },
                  "example": {
                    "headers": {"Content-Type": {"equalTo": "application/json"}},
                    "method": "POST",
                    "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                    "url": "/some/thing"
                  }
                },
                {"description": "Filter requests for which to create stub mapping"}
              ]}
            }}
          ]},
          "example": {
            "extractBodyCriteria": {
              "binarySizeThreshold": "10240",
              "textSizeThreshold": "2048"
            },
            "targetBaseUrl": "http://example.mocklab.io",
            "transformers": ["modify-response-header"],
            "captureHeaders": {
              "Accept": {},
              "Content-Type": {"caseInsensitive": true}
            },
            "repeatsAsScenarios": false,
            "requestBodyPattern": {
              "matcher": "equalToJson",
              "ignoreExtraElements": true,
              "ignoreArrayOrder": false
            },
            "transformerParameters": {"headerValue": "123"},
            "filters": {
              "method": "GET",
              "urlPathPattern": "/api/.*"
            },
            "persist": false
          }
        }}
      },
      "description": "Begin recording stub mappings",
      "responses": {"200": {"description": "Successfully started recording"}},
      "tags": ["Recordings"]
    }},
    "/__admin/requests": {
      "get": {
        "summary": "Get all requests in journal",
        "responses": {"200": {
          "description": "List of received requests",
          "content": {"application/json": {"example": {
            "requestJournalDisabled": false,
            "meta": {"total": 9},
            "requests": [
              {
                "request": {
                  "headers": {
                    "Connection": "keep-alive",
                    "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                    "Host": "localhost:56715"
                  },
                  "method": "GET",
                  "browserProxyRequest": false,
                  "loggedDateString": "2016-08-17T14:01:34Z",
                  "absoluteUrl": "http://localhost:56715/received-request/9",
                  "clientIp": "127.0.0.1",
                  "bodyAsBase64": "",
                  "body": "",
                  "loggedDate": 1471442494809,
                  "url": "/received-request/9",
                  "cookies": {}
                },
                "id": "45760a03-eebb-4387-ad0d-bb89b5d3d662",
                "responseDefinition": {
                  "transformers": [],
                  "transformerParameters": {},
                  "fromConfiguredStub": false,
                  "status": 404
                }
              },
              {
                "request": {
                  "headers": {
                    "Connection": "keep-alive",
                    "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                    "Host": "localhost:56715"
                  },
                  "method": "GET",
                  "browserProxyRequest": false,
                  "loggedDateString": "2016-08-17T14:01:34Z",
                  "absoluteUrl": "http://localhost:56715/received-request/8",
                  "clientIp": "127.0.0.1",
                  "bodyAsBase64": "",
                  "body": "",
                  "loggedDate": 1471442494802,
                  "url": "/received-request/8",
                  "cookies": {}
                },
                "id": "6ae78311-0178-46c9-987a-fbfc528d54d8",
                "responseDefinition": {
                  "transformers": [],
                  "transformerParameters": {},
                  "fromConfiguredStub": false,
                  "status": 404
                }
              },
              {
                "request": {
                  "headers": {
                    "Connection": "keep-alive",
                    "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                    "Host": "localhost:56715"
                  },
                  "method": "GET",
                  "browserProxyRequest": false,
                  "loggedDateString": "2016-08-17T14:01:34Z",
                  "absoluteUrl": "http://localhost:56715/received-request/7",
                  "clientIp": "127.0.0.1",
                  "bodyAsBase64": "",
                  "body": "",
                  "loggedDate": 1471442494795,
                  "url": "/received-request/7",
                  "cookies": {}
                },
                "id": "aba8e4ad-1b5b-4518-8f05-b2170a24de35",
                "responseDefinition": {
                  "transformers": [],
                  "transformerParameters": {},
                  "fromConfiguredStub": false,
                  "status": 404
                }
              }
            ]
          }}}
        }},
        "parameters": [
          {
            "schema": {"type": "string"},
            "in": "query",
            "name": "limit",
            "description": "The maximum number of results to return",
            "example": 10
          },
          {
            "schema": {"type": "string"},
            "in": "query",
            "name": "since",
            "description": "Only return logged requests after this date",
            "example": "2016-10-05T12:33:01.000Z"
          }
        ],
        "tags": ["Requests"]
      },
      "delete": {
        "summary": "Delete all requests in journal",
        "responses": {"200": {"description": "Successfully deleted"}},
        "tags": ["Requests"]
      }
    },
    "/__admin/shutdown": {"post": {
      "description": "Shutdown the WireMock server",
      "responses": {"200": {"description": "Server will be shut down"}},
      "tags": ["System"]
    }},
    "/__admin/requests/reset": {"post": {
      "summary": "Empty the request journal",
      "deprecated": true,
      "responses": {"200": {"description": "Successfully reset"}},
      "tags": ["Requests"]
    }},
    "/__admin/near-misses/request-pattern": {"post": {
      "summary": "Find near misses matching request pattern",
      "requestBody": {
        "required": true,
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "method": {
                "description": "The HTTP request method e.g. GET",
                "type": "string"
              },
              "queryParameters": {
                "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "basicAuthCredentials": {
                "description": "Pre-emptive basic auth credentials to match against",
                "type": "object",
                "properties": {
                  "password": {"type": "string"},
                  "username": {"type": "string"}
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "bodyPatterns": {
                "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "array",
                "items": {"type": "object"}
              },
              "urlPattern": {
                "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPath": {
                "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPathPattern": {
                "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "url": {
                "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "cookies": {
                "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              }
            },
            "example": {
              "headers": {"Content-Type": {"equalTo": "application/json"}},
              "method": "POST",
              "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
              "url": "/some/thing"
            }
          },
          "example": {
            "headers": {"Content-Type": {"matches": ".*/xml"}},
            "method": "POST",
            "url": "/resource"
          }
        }}
      },
      "description": "Find at most 3 near misses for closest logged requests to the specified request pattern",
      "responses": {"200": {
        "description": "Near misses matching criteria",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {"nearMisses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {
                      "Connection": "keep-alive",
                      "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                      "Host": "localhost:56738"
                    }
                  },
                  "method": {
                    "description": "The HTTP request method",
                    "type": "string",
                    "example": "GET"
                  },
                  "absoluteUrl": {
                    "description": "The full URL to match against",
                    "type": "string",
                    "example": "http://localhost:56738/received-request/2"
                  },
                  "body": {
                    "description": "Body string to match against",
                    "type": "string",
                    "example": "Hello world"
                  },
                  "url": {
                    "description": "The path and query to match exactly against",
                    "type": "string",
                    "example": "/received-request/2"
                  },
                  "cookies": {
                    "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {}
                  }
                }
              }
            }}
          },
          "example": {"nearMisses": [{
            "request": {
              "headers": {
                "Accept": "*/*",
                "User-Agent": "curl/7.30.0",
                "Host": "localhost:8080"
              },
              "method": "GET",
              "browserProxyRequest": false,
              "loggedDateString": "2016-07-01T19:47:44Z",
              "absoluteUrl": "http://localhost:8080/nomatch",
              "clientIp": "0:0:0:0:0:0:0:1",
              "bodyAsBase64": "",
              "body": "",
              "loggedDate": 1467402464520,
              "url": "/nomatch",
              "cookies": {}
            },
            "requestPattern": {
              "method": "GET",
              "url": "/almostmatch"
            },
            "matchResult": {"distance": 0.06944444444444445}
          }]}
        }}
      }},
      "tags": ["Near Misses"]
    }},
    "/__admin/recordings/status": {"get": {
      "summary": "Get recording status",
      "responses": {"200": {
        "description": "Successfully got the record status",
        "content": {"application/json": {"schema": {
          "type": "object",
          "properties": {"status": {
            "type": "string",
            "enum": [
              "NeverStarted",
              "Recording",
              "Stopped"
            ],
            "example": "Stopped"
          }}
        }}}
      }},
      "tags": ["Recordings"]
    }},
    "/__admin/reset": {"post": {
      "summary": "Reset mappings and request journal",
      "description": "Reset mappings to the default state and reset the request journal",
      "responses": {"200": {"description": "Successfully reset"}},
      "tags": ["System"]
    }},
    "/__admin/requests/remove": {"post": {
      "summary": "Remove requests by criteria",
      "requestBody": {
        "required": true,
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "method": {
                "description": "The HTTP request method e.g. GET",
                "type": "string"
              },
              "queryParameters": {
                "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "basicAuthCredentials": {
                "description": "Pre-emptive basic auth credentials to match against",
                "type": "object",
                "properties": {
                  "password": {"type": "string"},
                  "username": {"type": "string"}
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "bodyPatterns": {
                "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "array",
                "items": {"type": "object"}
              },
              "urlPattern": {
                "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPath": {
                "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPathPattern": {
                "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "url": {
                "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "cookies": {
                "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              }
            },
            "example": {
              "headers": {"Content-Type": {"equalTo": "application/json"}},
              "method": "POST",
              "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
              "url": "/some/thing"
            }
          },
          "example": {
            "headers": {"Content-Type": {"matches": ".*/xml"}},
            "method": "POST",
            "url": "/resource"
          }
        }}
      },
      "description": "Removed requests logged in the journal matching the specified criteria",
      "responses": {"200": {
        "description": "Removed request details",
        "content": {"application/json": {"example": {"requests": [
          {
            "headers": {
              "Accept": "image/png,image/*;q=0.8,*/*;q=0.5",
              "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0",
              "Accept-Language": "en-us,en;q=0.5"
            },
            "method": "GET",
            "browserProxyRequest": true,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://mydomain.com/my/url",
            "body": "",
            "loggedDate": 1339083581823,
            "url": "/my/url"
          },
          {
            "headers": {
              "Accept": "text/plain",
              "Content-Type": "text/plain"
            },
            "method": "POST",
            "browserProxyRequest": false,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://my.other.domain.com/my/other/url",
            "body": "My text",
            "loggedDate": 1339083581823,
            "url": "/my/other/url"
          }
        ]}}}
      }},
      "tags": ["Requests"]
    }},
    "/__admin/scenarios/reset": {"post": {
      "summary": "Reset the state of all scenarios",
      "responses": {"200": {"description": "Successfully reset"}},
      "tags": ["Scenarios"]
    }},
    "/__admin/requests/count": {"post": {
      "summary": "Count requests by criteria",
      "requestBody": {
        "required": true,
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "method": {
                "description": "The HTTP request method e.g. GET",
                "type": "string"
              },
              "queryParameters": {
                "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "basicAuthCredentials": {
                "description": "Pre-emptive basic auth credentials to match against",
                "type": "object",
                "properties": {
                  "password": {"type": "string"},
                  "username": {"type": "string"}
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "bodyPatterns": {
                "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "array",
                "items": {"type": "object"}
              },
              "urlPattern": {
                "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPath": {
                "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPathPattern": {
                "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "url": {
                "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "cookies": {
                "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              }
            },
            "example": {
              "headers": {"Content-Type": {"equalTo": "application/json"}},
              "method": "POST",
              "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
              "url": "/some/thing"
            }
          },
          "example": {
            "headers": {"Content-Type": {"matches": ".*/xml"}},
            "method": "POST",
            "url": "/resource"
          }
        }}
      },
      "description": "Count requests logged in the journal matching the specified criteria",
      "responses": {"200": {
        "description": "Number of matching requests",
        "content": {"application/json": {"schema": {
          "type": "object",
          "properties": {"count": {
            "type": "integer",
            "example": 4
          }}
        }}}
      }},
      "tags": ["Requests"]
    }},
    "/__admin/mappings/reset": {"post": {
      "summary": "Reset stub mappings",
      "description": "Restores stub mappings to the defaults defined back in the backing store",
      "responses": {"200": {"description": "Successfully reset"}},
      "tags": ["Stub Mappings"]
    }},
    "/__admin/mappings/save": {"post": {
      "summary": "Persist stub mappings",
      "description": "Save all persistent stub mappings to the backing store",
      "responses": {"200": {"description": "Successfully saved"}},
      "tags": ["Stub Mappings"]
    }},
    "/__admin/mappings/{stubMappingId}": {
      "get": {
        "summary": "Get stub mapping by ID",
        "responses": {
          "200": {
            "description": "The stub mapping",
            "content": {"application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "type": "object",
                    "properties": {
                      "headers": {
                        "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "method": {
                        "description": "The HTTP request method e.g. GET",
                        "type": "string"
                      },
                      "queryParameters": {
                        "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "basicAuthCredentials": {
                        "description": "Pre-emptive basic auth credentials to match against",
                        "type": "object",
                        "properties": {
                          "password": {"type": "string"},
                          "username": {"type": "string"}
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      },
                      "bodyPatterns": {
                        "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "array",
                        "items": {"type": "object"}
                      },
                      "urlPattern": {
                        "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPath": {
                        "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPathPattern": {
                        "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "url": {
                        "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "cookies": {
                        "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      }
                    },
                    "example": {
                      "headers": {"Content-Type": {"equalTo": "application/json"}},
                      "method": "POST",
                      "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                      "url": "/some/thing"
                    }
                  },
                  "metadata": {
                    "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                    "type": "object"
                  },
                  "newScenarioState": {
                    "description": "The new state for the scenario to be updated to after this stub is served.",
                    "type": "string"
                  },
                  "response": {"allOf": [
                    {"oneOf": [
                      {
                        "description": "Log normal randomly distributed response delay.",
                        "title": "Log normal",
                        "type": "object",
                        "properties": {
                          "sigma": {"type": "number"},
                          "median": {"type": "integer"},
                          "type": {
                            "type": "string",
                            "enum": ["lognormal"]
                          }
                        }
                      },
                      {
                        "description": "Uniformly distributed random response delay.",
                        "title": "Uniform",
                        "type": "object",
                        "properties": {
                          "lower": {"type": "integer"},
                          "upper": {"type": "integer"},
                          "type": {
                            "type": "string",
                            "enum": ["uniform"]
                          }
                        }
                      }
                    ]},
                    {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "Map of response headers to send",
                          "type": "object"
                        },
                        "transformers": {
                          "description": "List of names of transformers to apply to this response.",
                          "type": "array",
                          "items": {"type": "string"}
                        },
                        "fixedDelayMilliseconds": {
                          "description": "Number of milliseconds to delay be before sending the response.",
                          "type": "integer"
                        },
                        "fault": {
                          "description": "The fault to apply (instead of a full, valid response).",
                          "type": "string",
                          "enum": [
                            "CONNECTION_RESET_BY_PEER",
                            "EMPTY_RESPONSE",
                            "MALFORMED_RESPONSE_CHUNK",
                            "RANDOM_DATA_THEN_CLOSE"
                          ]
                        },
                        "jsonBody": {
                          "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "object"
                        },
                        "body": {
                          "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "string"
                        },
                        "fromConfiguredStub": {
                          "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                          "type": "boolean"
                        },
                        "statusMessage": {
                          "description": "The HTTP status message to be returned",
                          "type": "string"
                        },
                        "additionalProxyRequestHeaders": {
                          "description": "Extra request headers to send when proxying to another host.",
                          "type": "object"
                        },
                        "transformerParameters": {
                          "description": "Parameters to apply to response transformers.",
                          "type": "object"
                        },
                        "bodyFileName": {
                          "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "string"
                        },
                        "base64Body": {
                          "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The HTTP status code to be returned",
                          "type": "integer"
                        },
                        "proxyBaseUrl": {
                          "description": "The base URL of the target to proxy matching requests to.",
                          "type": "string"
                        }
                      }
                    }
                  ]},
                  "name": {
                    "description": "The stub mapping's name",
                    "type": "string"
                  },
                  "postServeActions": {
                    "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                    "type": "object"
                  },
                  "requiredScenarioState": {
                    "description": "The required state of the scenario in order for this stub to be matched.",
                    "type": "string"
                  },
                  "id": {
                    "description": "This stub mapping's unique identifier",
                    "type": "string"
                  },
                  "persistent": {
                    "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                    "type": "boolean"
                  },
                  "priority": {
                    "description": "This stub mapping's priority relative to others. 1 is highest.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "uuid": {
                    "description": "Alias for the id",
                    "type": "string"
                  },
                  "scenarioName": {
                    "description": "The name of the scenario that this stub mapping is part of",
                    "type": "string"
                  }
                }
              },
              "example": {
                "request": {
                  "headers": {"Accept": {"equalTo": "text/plain"}},
                  "method": "GET",
                  "url": "/some/thing"
                },
                "response": {
                  "headers": {"Content-Type": "text/plain"},
                  "body": "Hello world!",
                  "status": 200
                },
                "id": "76ada7b0-49ae-4229-91c4-396a36f18e09",
                "priority": 3
              }
            }}
          },
          "404": {"description": "Stub mapping not found"}
        },
        "tags": ["Stub Mappings"]
      },
      "parameters": [{
        "schema": {"type": "string"},
        "in": "path",
        "name": "stubMappingId",
        "description": "The UUID of stub mapping",
        "required": true,
        "example": "730d3e32-d098-4169-a20c-554c3bedce58"
      }],
      "delete": {
        "summary": "Delete a stub mapping",
        "responses": {
          "200": {"description": "OK"},
          "404": {"description": "Stub mapping not found"}
        },
        "tags": ["Stub Mappings"]
      },
      "put": {
        "summary": "Update a stub mapping",
        "requestBody": {"content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "request": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  },
                  "method": {
                    "description": "The HTTP request method e.g. GET",
                    "type": "string"
                  },
                  "queryParameters": {
                    "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  },
                  "basicAuthCredentials": {
                    "description": "Pre-emptive basic auth credentials to match against",
                    "type": "object",
                    "properties": {
                      "password": {"type": "string"},
                      "username": {"type": "string"}
                    },
                    "required": [
                      "username",
                      "password"
                    ]
                  },
                  "bodyPatterns": {
                    "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "array",
                    "items": {"type": "object"}
                  },
                  "urlPattern": {
                    "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "urlPath": {
                    "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "urlPathPattern": {
                    "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "url": {
                    "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "cookies": {
                    "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  }
                },
                "example": {
                  "headers": {"Content-Type": {"equalTo": "application/json"}},
                  "method": "POST",
                  "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                  "url": "/some/thing"
                }
              },
              "metadata": {
                "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                "type": "object"
              },
              "newScenarioState": {
                "description": "The new state for the scenario to be updated to after this stub is served.",
                "type": "string"
              },
              "response": {"allOf": [
                {"oneOf": [
                  {
                    "description": "Log normal randomly distributed response delay.",
                    "title": "Log normal",
                    "type": "object",
                    "properties": {
                      "sigma": {"type": "number"},
                      "median": {"type": "integer"},
                      "type": {
                        "type": "string",
                        "enum": ["lognormal"]
                      }
                    }
                  },
                  {
                    "description": "Uniformly distributed random response delay.",
                    "title": "Uniform",
                    "type": "object",
                    "properties": {
                      "lower": {"type": "integer"},
                      "upper": {"type": "integer"},
                      "type": {
                        "type": "string",
                        "enum": ["uniform"]
                      }
                    }
                  }
                ]},
                {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "description": "Map of response headers to send",
                      "type": "object"
                    },
                    "transformers": {
                      "description": "List of names of transformers to apply to this response.",
                      "type": "array",
                      "items": {"type": "string"}
                    },
                    "fixedDelayMilliseconds": {
                      "description": "Number of milliseconds to delay be before sending the response.",
                      "type": "integer"
                    },
                    "fault": {
                      "description": "The fault to apply (instead of a full, valid response).",
                      "type": "string",
                      "enum": [
                        "CONNECTION_RESET_BY_PEER",
                        "EMPTY_RESPONSE",
                        "MALFORMED_RESPONSE_CHUNK",
                        "RANDOM_DATA_THEN_CLOSE"
                      ]
                    },
                    "jsonBody": {
                      "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "object"
                    },
                    "body": {
                      "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "fromConfiguredStub": {
                      "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                      "type": "boolean"
                    },
                    "statusMessage": {
                      "description": "The HTTP status message to be returned",
                      "type": "string"
                    },
                    "additionalProxyRequestHeaders": {
                      "description": "Extra request headers to send when proxying to another host.",
                      "type": "object"
                    },
                    "transformerParameters": {
                      "description": "Parameters to apply to response transformers.",
                      "type": "object"
                    },
                    "bodyFileName": {
                      "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "base64Body": {
                      "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The HTTP status code to be returned",
                      "type": "integer"
                    },
                    "proxyBaseUrl": {
                      "description": "The base URL of the target to proxy matching requests to.",
                      "type": "string"
                    }
                  }
                }
              ]},
              "name": {
                "description": "The stub mapping's name",
                "type": "string"
              },
              "postServeActions": {
                "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                "type": "object"
              },
              "requiredScenarioState": {
                "description": "The required state of the scenario in order for this stub to be matched.",
                "type": "string"
              },
              "id": {
                "description": "This stub mapping's unique identifier",
                "type": "string"
              },
              "persistent": {
                "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                "type": "boolean"
              },
              "priority": {
                "description": "This stub mapping's priority relative to others. 1 is highest.",
                "type": "integer",
                "minimum": 1
              },
              "uuid": {
                "description": "Alias for the id",
                "type": "string"
              },
              "scenarioName": {
                "description": "The name of the scenario that this stub mapping is part of",
                "type": "string"
              }
            }
          },
          "example": {
            "request": {
              "method": "GET",
              "url": "/some/thing"
            },
            "response": {
              "headers": {"Content-Type": "text/plain"},
              "body": "Hello world!",
              "status": 200
            }
          }
        }}},
        "responses": {
          "200": {
            "description": "The stub mapping",
            "content": {"application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "type": "object",
                    "properties": {
                      "headers": {
                        "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "method": {
                        "description": "The HTTP request method e.g. GET",
                        "type": "string"
                      },
                      "queryParameters": {
                        "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "basicAuthCredentials": {
                        "description": "Pre-emptive basic auth credentials to match against",
                        "type": "object",
                        "properties": {
                          "password": {"type": "string"},
                          "username": {"type": "string"}
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      },
                      "bodyPatterns": {
                        "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "array",
                        "items": {"type": "object"}
                      },
                      "urlPattern": {
                        "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPath": {
                        "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPathPattern": {
                        "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "url": {
                        "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "cookies": {
                        "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      }
                    },
                    "example": {
                      "headers": {"Content-Type": {"equalTo": "application/json"}},
                      "method": "POST",
                      "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                      "url": "/some/thing"
                    }
                  },
                  "metadata": {
                    "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                    "type": "object"
                  },
                  "newScenarioState": {
                    "description": "The new state for the scenario to be updated to after this stub is served.",
                    "type": "string"
                  },
                  "response": {"allOf": [
                    {"oneOf": [
                      {
                        "description": "Log normal randomly distributed response delay.",
                        "title": "Log normal",
                        "type": "object",
                        "properties": {
                          "sigma": {"type": "number"},
                          "median": {"type": "integer"},
                          "type": {
                            "type": "string",
                            "enum": ["lognormal"]
                          }
                        }
                      },
                      {
                        "description": "Uniformly distributed random response delay.",
                        "title": "Uniform",
                        "type": "object",
                        "properties": {
                          "lower": {"type": "integer"},
                          "upper": {"type": "integer"},
                          "type": {
                            "type": "string",
                            "enum": ["uniform"]
                          }
                        }
                      }
                    ]},
                    {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "Map of response headers to send",
                          "type": "object"
                        },
                        "transformers": {
                          "description": "List of names of transformers to apply to this response.",
                          "type": "array",
                          "items": {"type": "string"}
                        },
                        "fixedDelayMilliseconds": {
                          "description": "Number of milliseconds to delay be before sending the response.",
                          "type": "integer"
                        },
                        "fault": {
                          "description": "The fault to apply (instead of a full, valid response).",
                          "type": "string",
                          "enum": [
                            "CONNECTION_RESET_BY_PEER",
                            "EMPTY_RESPONSE",
                            "MALFORMED_RESPONSE_CHUNK",
                            "RANDOM_DATA_THEN_CLOSE"
                          ]
                        },
                        "jsonBody": {
                          "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "object"
                        },
                        "body": {
                          "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "string"
                        },
                        "fromConfiguredStub": {
                          "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                          "type": "boolean"
                        },
                        "statusMessage": {
                          "description": "The HTTP status message to be returned",
                          "type": "string"
                        },
                        "additionalProxyRequestHeaders": {
                          "description": "Extra request headers to send when proxying to another host.",
                          "type": "object"
                        },
                        "transformerParameters": {
                          "description": "Parameters to apply to response transformers.",
                          "type": "object"
                        },
                        "bodyFileName": {
                          "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "string"
                        },
                        "base64Body": {
                          "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The HTTP status code to be returned",
                          "type": "integer"
                        },
                        "proxyBaseUrl": {
                          "description": "The base URL of the target to proxy matching requests to.",
                          "type": "string"
                        }
                      }
                    }
                  ]},
                  "name": {
                    "description": "The stub mapping's name",
                    "type": "string"
                  },
                  "postServeActions": {
                    "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                    "type": "object"
                  },
                  "requiredScenarioState": {
                    "description": "The required state of the scenario in order for this stub to be matched.",
                    "type": "string"
                  },
                  "id": {
                    "description": "This stub mapping's unique identifier",
                    "type": "string"
                  },
                  "persistent": {
                    "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                    "type": "boolean"
                  },
                  "priority": {
                    "description": "This stub mapping's priority relative to others. 1 is highest.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "uuid": {
                    "description": "Alias for the id",
                    "type": "string"
                  },
                  "scenarioName": {
                    "description": "The name of the scenario that this stub mapping is part of",
                    "type": "string"
                  }
                }
              },
              "example": {
                "request": {
                  "headers": {"Accept": {"equalTo": "text/plain"}},
                  "method": "GET",
                  "url": "/some/thing"
                },
                "response": {
                  "headers": {"Content-Type": "text/plain"},
                  "body": "Hello world!",
                  "status": 200
                },
                "id": "76ada7b0-49ae-4229-91c4-396a36f18e09",
                "priority": 3
              }
            }}
          },
          "404": {"description": "Stub mapping not found"}
        },
        "tags": ["Stub Mappings"]
      }
    },
    "/__admin/recordings/snapshot": {"post": {
      "summary": "Take a snapshot recording",
      "requestBody": {
        "required": true,
        "content": {"application/json": {
          "schema": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "extractBodyCriteria": {
                    "description": "Criteria for extracting response bodies to a separate file instead of including it in the stub mapping",
                    "type": "object",
                    "properties": {
                      "binarySizeThreshold": {
                        "default": "0",
                        "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                        "type": "string",
                        "example": "18.2 GB"
                      },
                      "textSizeThreshold": {
                        "default": "0",
                        "description": "Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \"56 Mb\". Default unit is bytes.",
                        "type": "string",
                        "example": "18.2 GB"
                      }
                    },
                    "example": [{
                      "binarySizeThreshold": "1 Mb",
                      "textSizeThreshold": "2 kb"
                    }]
                  },
                  "transformers": {
                    "description": "Parameters to pass to stub mapping transformers",
                    "type": "array",
                    "items": {"type": "string"}
                  },
                  "captureHeaders": {
                    "description": "Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \"caseInsensitive\", which defaults to false",
                    "additionalProperties": {
                      "additionalProperties": false,
                      "type": "object",
                      "properties": {"caseInsensitive": {"type": "boolean"}}
                    },
                    "type": "object",
                    "example": {
                      "Accept": {},
                      "Content-Type": {"caseInsensitive": true}
                    }
                  },
                  "repeatsAsScenarios": {
                    "default": true,
                    "description": "When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded",
                    "type": "boolean"
                  },
                  "requestBodyPattern": {
                    "oneOf": [
                      {
                        "description": "Automatically determine matcher based on content type (the default)",
                        "type": "object",
                        "properties": {
                          "caseInsensitive": {
                            "default": false,
                            "description": "If equalTo is used, match body use case-insensitive string comparison",
                            "type": "boolean"
                          },
                          "matcher": {
                            "type": "string",
                            "enum": ["auto"]
                          },
                          "ignoreExtraElements": {
                            "default": true,
                            "description": "If equalToJson is used, matcher ignores extra elements in objects",
                            "type": "boolean"
                          },
                          "ignoreArrayOrder": {
                            "default": true,
                            "description": "If equalToJson is used, ignore order of array elements",
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "Always match request bodies using equalTo",
                        "type": "object",
                        "properties": {
                          "caseInsensitive": {
                            "default": false,
                            "description": "Match body using case-insensitive string comparison",
                            "type": "boolean"
                          },
                          "matcher": {
                            "type": "string",
                            "enum": ["equalTo"]
                          }
                        }
                      },
                      {
                        "description": "Always match request bodies using equalToJson",
                        "type": "object",
                        "properties": {
                          "matcher": {
                            "type": "string",
                            "enum": ["equalToJson"]
                          },
                          "ignoreExtraElements": {
                            "default": true,
                            "description": "Ignore extra elements in objects",
                            "type": "boolean"
                          },
                          "ignoreArrayOrder": {
                            "default": true,
                            "description": "Ignore order of array elements",
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "Always match request bodies using equalToXml",
                        "type": "object",
                        "properties": {"matcher": {
                          "type": "string",
                          "enum": ["equalToXml"]
                        }}
                      }
                    ],
                    "description": "Control the request body matcher used in generated stub mappings",
                    "type": "object"
                  },
                  "transformerParameters": {
                    "description": "List of names of stub mappings transformers to apply to generated stubs",
                    "type": "object"
                  },
                  "persist": {
                    "default": true,
                    "description": "Whether to save stub mappings to the file system or just return them",
                    "type": "boolean"
                  }
                }
              },
              {"properties": {"filters": {
                "allOf": [
                  {
                    "description": "Filter requests for which to create stub mapping",
                    "type": "object",
                    "properties": {"ids": {
                      "type": "array",
                      "items": {"type": "string"}
                    }}
                  },
                  {
                    "type": "object",
                    "properties": {
                      "headers": {
                        "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "method": {
                        "description": "The HTTP request method e.g. GET",
                        "type": "string"
                      },
                      "queryParameters": {
                        "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      },
                      "basicAuthCredentials": {
                        "description": "Pre-emptive basic auth credentials to match against",
                        "type": "object",
                        "properties": {
                          "password": {"type": "string"},
                          "username": {"type": "string"}
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      },
                      "bodyPatterns": {
                        "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "array",
                        "items": {"type": "object"}
                      },
                      "urlPattern": {
                        "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPath": {
                        "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "urlPathPattern": {
                        "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "url": {
                        "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                        "type": "string"
                      },
                      "cookies": {
                        "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                        "type": "object"
                      }
                    },
                    "example": {
                      "headers": {"Content-Type": {"equalTo": "application/json"}},
                      "method": "POST",
                      "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                      "url": "/some/thing"
                    }
                  }
                ],
                "type": "object"
              }}}
            ],
            "type": "object"
          },
          "example": {
            "extractBodyCriteria": {
              "binarySizeThreshold": "1 Mb",
              "textSizeThreshold": "2 kb"
            },
            "transformers": ["modify-response-header"],
            "captureHeaders": {
              "Accept": {},
              "Content-Type": {"caseInsensitive": true}
            },
            "repeatsAsScenarios": false,
            "requestBodyPattern": {
              "matcher": "equalToJson",
              "ignoreExtraElements": true,
              "ignoreArrayOrder": false
            },
            "transformerParameters": {"headerValue": "123"},
            "filters": {
              "method": "GET",
              "ids": ["40a93c4a-d378-4e07-8321-6158d5dbcb29"],
              "urlPathPattern": "/api/.*"
            },
            "persist": false,
            "outputFormat": "FULL"
          }
        }}
      },
      "responses": {"200": {
        "description": "Successfully took a snapshot recording",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "mappings": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "request": {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        },
                        "method": {
                          "description": "The HTTP request method e.g. GET",
                          "type": "string"
                        },
                        "queryParameters": {
                          "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        },
                        "basicAuthCredentials": {
                          "description": "Pre-emptive basic auth credentials to match against",
                          "type": "object",
                          "properties": {
                            "password": {"type": "string"},
                            "username": {"type": "string"}
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        },
                        "bodyPatterns": {
                          "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "array",
                          "items": {"type": "object"}
                        },
                        "urlPattern": {
                          "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "urlPath": {
                          "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "urlPathPattern": {
                          "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "url": {
                          "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "cookies": {
                          "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        }
                      },
                      "example": {
                        "headers": {"Content-Type": {"equalTo": "application/json"}},
                        "method": "POST",
                        "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                        "url": "/some/thing"
                      }
                    },
                    "metadata": {
                      "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                      "type": "object"
                    },
                    "newScenarioState": {
                      "description": "The new state for the scenario to be updated to after this stub is served.",
                      "type": "string"
                    },
                    "response": {"allOf": [
                      {"oneOf": [
                        {
                          "description": "Log normal randomly distributed response delay.",
                          "title": "Log normal",
                          "type": "object",
                          "properties": {
                            "sigma": {"type": "number"},
                            "median": {"type": "integer"},
                            "type": {
                              "type": "string",
                              "enum": ["lognormal"]
                            }
                          }
                        },
                        {
                          "description": "Uniformly distributed random response delay.",
                          "title": "Uniform",
                          "type": "object",
                          "properties": {
                            "lower": {"type": "integer"},
                            "upper": {"type": "integer"},
                            "type": {
                              "type": "string",
                              "enum": ["uniform"]
                            }
                          }
                        }
                      ]},
                      {
                        "type": "object",
                        "properties": {
                          "headers": {
                            "description": "Map of response headers to send",
                            "type": "object"
                          },
                          "transformers": {
                            "description": "List of names of transformers to apply to this response.",
                            "type": "array",
                            "items": {"type": "string"}
                          },
                          "fixedDelayMilliseconds": {
                            "description": "Number of milliseconds to delay be before sending the response.",
                            "type": "integer"
                          },
                          "fault": {
                            "description": "The fault to apply (instead of a full, valid response).",
                            "type": "string",
                            "enum": [
                              "CONNECTION_RESET_BY_PEER",
                              "EMPTY_RESPONSE",
                              "MALFORMED_RESPONSE_CHUNK",
                              "RANDOM_DATA_THEN_CLOSE"
                            ]
                          },
                          "jsonBody": {
                            "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "object"
                          },
                          "body": {
                            "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "fromConfiguredStub": {
                            "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                            "type": "boolean"
                          },
                          "statusMessage": {
                            "description": "The HTTP status message to be returned",
                            "type": "string"
                          },
                          "additionalProxyRequestHeaders": {
                            "description": "Extra request headers to send when proxying to another host.",
                            "type": "object"
                          },
                          "transformerParameters": {
                            "description": "Parameters to apply to response transformers.",
                            "type": "object"
                          },
                          "bodyFileName": {
                            "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "base64Body": {
                            "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The HTTP status code to be returned",
                            "type": "integer"
                          },
                          "proxyBaseUrl": {
                            "description": "The base URL of the target to proxy matching requests to.",
                            "type": "string"
                          }
                        }
                      }
                    ]},
                    "name": {
                      "description": "The stub mapping's name",
                      "type": "string"
                    },
                    "postServeActions": {
                      "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                      "type": "object"
                    },
                    "requiredScenarioState": {
                      "description": "The required state of the scenario in order for this stub to be matched.",
                      "type": "string"
                    },
                    "id": {
                      "description": "This stub mapping's unique identifier",
                      "type": "string"
                    },
                    "persistent": {
                      "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                      "type": "boolean"
                    },
                    "priority": {
                      "description": "This stub mapping's priority relative to others. 1 is highest.",
                      "type": "integer",
                      "minimum": 1
                    },
                    "uuid": {
                      "description": "Alias for the id",
                      "type": "string"
                    },
                    "scenarioName": {
                      "description": "The name of the scenario that this stub mapping is part of",
                      "type": "string"
                    }
                  }
                }
              },
              "meta": {
                "type": "object",
                "properties": {"total": {
                  "type": "integer",
                  "example": 4
                }},
                "required": ["total"]
              }
            }
          },
          "example": {"mappings": [{
            "request": {
              "method": "GET",
              "url": "/recordables/123"
            },
            "response": {
              "headers": {"Content-Type": "application/json"},
              "body": "{\n  \"message\": \"Congratulations on your first recording!\"\n}",
              "status": 200
            },
            "name": "recordables_123",
            "id": "093f1027-e5e0-4921-9e6d-e619dfd5d2c7",
            "persistent": true,
            "uuid": "093f1027-e5e0-4921-9e6d-e619dfd5d2c7"
          }]}
        }}
      }},
      "tags": ["Recordings"]
    }},
    "/__admin/requests/unmatched": {"get": {
      "summary": "Find unmatched requests",
      "description": "Get details of logged requests that weren't matched by any stub mapping",
      "responses": {"200": {
        "description": "Unmatched request details",
        "content": {"application/json": {"example": {"requests": [
          {
            "headers": {
              "Accept": "image/png,image/*;q=0.8,*/*;q=0.5",
              "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0",
              "Accept-Language": "en-us,en;q=0.5"
            },
            "method": "GET",
            "browserProxyRequest": true,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://mydomain.com/my/url",
            "body": "",
            "loggedDate": 1339083581823,
            "url": "/my/url"
          },
          {
            "headers": {
              "Accept": "text/plain",
              "Content-Type": "text/plain"
            },
            "method": "POST",
            "browserProxyRequest": false,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://my.other.domain.com/my/other/url",
            "body": "My text",
            "loggedDate": 1339083581823,
            "url": "/my/other/url"
          }
        ]}}}
      }},
      "tags": ["Requests"]
    }},
    "/__admin/requests/unmatched/near-misses": {"get": {
      "description": "Retrieve near-misses for all unmatched requests",
      "responses": {"200": {
        "description": "Near misses matching criteria",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {"nearMisses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {
                      "Connection": "keep-alive",
                      "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                      "Host": "localhost:56738"
                    }
                  },
                  "method": {
                    "description": "The HTTP request method",
                    "type": "string",
                    "example": "GET"
                  },
                  "absoluteUrl": {
                    "description": "The full URL to match against",
                    "type": "string",
                    "example": "http://localhost:56738/received-request/2"
                  },
                  "body": {
                    "description": "Body string to match against",
                    "type": "string",
                    "example": "Hello world"
                  },
                  "url": {
                    "description": "The path and query to match exactly against",
                    "type": "string",
                    "example": "/received-request/2"
                  },
                  "cookies": {
                    "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {}
                  }
                }
              }
            }}
          },
          "example": {"nearMisses": [{
            "request": {
              "headers": {
                "Accept": "*/*",
                "User-Agent": "curl/7.30.0",
                "Host": "localhost:8080"
              },
              "method": "GET",
              "browserProxyRequest": false,
              "loggedDateString": "2016-07-01T19:47:44Z",
              "absoluteUrl": "http://localhost:8080/nomatch",
              "clientIp": "0:0:0:0:0:0:0:1",
              "bodyAsBase64": "",
              "body": "",
              "loggedDate": 1467402464520,
              "url": "/nomatch",
              "cookies": {}
            },
            "requestPattern": {
              "method": "GET",
              "url": "/almostmatch"
            },
            "matchResult": {"distance": 0.06944444444444445}
          }]}
        }}
      }},
      "tags": ["Near Misses"]
    }},
    "/__admin/requests/{requestId}": {
      "get": {
        "summary": "Get request by ID",
        "responses": {
          "200": {
            "description": "OK",
            "content": {"application/json": {"example": {
              "request": {
                "headers": {
                  "Connection": "keep-alive",
                  "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                  "Host": "localhost:56738"
                },
                "method": "GET",
                "browserProxyRequest": false,
                "loggedDateString": "2016-08-17T14:02:37Z",
                "absoluteUrl": "http://localhost:56738/received-request/2",
                "clientIp": "127.0.0.1",
                "bodyAsBase64": "",
                "body": "",
                "loggedDate": 1471442557047,
                "url": "/received-request/2",
                "cookies": {}
              },
              "id": "12fb14bb-600e-4bfa-bd8d-be7f12562c99",
              "responseDefinition": {
                "transformers": [],
                "transformerParameters": {},
                "fromConfiguredStub": false,
                "status": 404
              }
            }}}
          },
          "404": {"description": "Request not found"}
        },
        "parameters": [{
          "schema": {"type": "string"},
          "in": "path",
          "name": "requestId",
          "description": "The UUID of the logged request",
          "required": true,
          "example": "12fb14bb-600e-4bfa-bd8d-be7f12562c99"
        }],
        "tags": ["Requests"]
      },
      "delete": {
        "summary": "Delete request by ID",
        "responses": {"200": {"description": "Successfully deleted"}},
        "parameters": [{
          "schema": {"type": "string"},
          "in": "path",
          "name": "requestId",
          "description": "The UUID of the logged request",
          "required": true,
          "example": "12fb14bb-600e-4bfa-bd8d-be7f12562c99"
        }],
        "tags": ["Requests"]
      }
    },
    "/__admin/near-misses/request": {"post": {
      "summary": "Find near misses matching specific request",
      "requestBody": {
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object",
                "example": {
                  "Connection": "keep-alive",
                  "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                  "Host": "localhost:56738"
                }
              },
              "method": {
                "description": "The HTTP request method",
                "type": "string",
                "example": "GET"
              },
              "absoluteUrl": {
                "description": "The full URL to match against",
                "type": "string",
                "example": "http://localhost:56738/received-request/2"
              },
              "body": {
                "description": "Body string to match against",
                "type": "string",
                "example": "Hello world"
              },
              "url": {
                "description": "The path and query to match exactly against",
                "type": "string",
                "example": "/received-request/2"
              },
              "cookies": {
                "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object",
                "example": {}
              }
            }
          },
          "example": {
            "headers": {
              "Accept": "*/*",
              "User-Agent": "curl/7.30.0",
              "Host": "localhost:8080"
            },
            "method": "GET",
            "browserProxyRequest": false,
            "loggedDateString": "2016-07-01T19:47:44Z",
            "absoluteUrl": "http://localhost:8080/actual",
            "clientIp": "0:0:0:0:0:0:0:1",
            "bodyAsBase64": "",
            "body": "",
            "loggedDate": 1467402464520,
            "url": "/actual",
            "cookies": {}
          }
        }},
        "required": true
      },
      "description": "Find at most 3 near misses for closest stub mappings to the specified request",
      "responses": {"200": {
        "description": "Near misses matching criteria",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {"nearMisses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {
                      "Connection": "keep-alive",
                      "User-Agent": "Apache-HttpClient/4.5.1 (Java/1.7.0_51)",
                      "Host": "localhost:56738"
                    }
                  },
                  "method": {
                    "description": "The HTTP request method",
                    "type": "string",
                    "example": "GET"
                  },
                  "absoluteUrl": {
                    "description": "The full URL to match against",
                    "type": "string",
                    "example": "http://localhost:56738/received-request/2"
                  },
                  "body": {
                    "description": "Body string to match against",
                    "type": "string",
                    "example": "Hello world"
                  },
                  "url": {
                    "description": "The path and query to match exactly against",
                    "type": "string",
                    "example": "/received-request/2"
                  },
                  "cookies": {
                    "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object",
                    "example": {}
                  }
                }
              }
            }}
          },
          "example": {"nearMisses": [{
            "request": {
              "headers": {
                "Accept": "*/*",
                "User-Agent": "curl/7.30.0",
                "Host": "localhost:8080"
              },
              "method": "GET",
              "browserProxyRequest": false,
              "loggedDateString": "2016-07-01T19:47:44Z",
              "absoluteUrl": "http://localhost:8080/nomatch",
              "clientIp": "0:0:0:0:0:0:0:1",
              "bodyAsBase64": "",
              "body": "",
              "loggedDate": 1467402464520,
              "url": "/nomatch",
              "cookies": {}
            },
            "requestPattern": {
              "method": "GET",
              "url": "/almostmatch"
            },
            "matchResult": {"distance": 0.06944444444444445}
          }]}
        }}
      }},
      "tags": ["Near Misses"]
    }},
    "/__admin/mappings": {
      "post": {
        "summary": "Create a new stub mapping",
        "requestBody": {"content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "request": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  },
                  "method": {
                    "description": "The HTTP request method e.g. GET",
                    "type": "string"
                  },
                  "queryParameters": {
                    "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  },
                  "basicAuthCredentials": {
                    "description": "Pre-emptive basic auth credentials to match against",
                    "type": "object",
                    "properties": {
                      "password": {"type": "string"},
                      "username": {"type": "string"}
                    },
                    "required": [
                      "username",
                      "password"
                    ]
                  },
                  "bodyPatterns": {
                    "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "array",
                    "items": {"type": "object"}
                  },
                  "urlPattern": {
                    "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "urlPath": {
                    "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "urlPathPattern": {
                    "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "url": {
                    "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                    "type": "string"
                  },
                  "cookies": {
                    "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                    "type": "object"
                  }
                },
                "example": {
                  "headers": {"Content-Type": {"equalTo": "application/json"}},
                  "method": "POST",
                  "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                  "url": "/some/thing"
                }
              },
              "metadata": {
                "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                "type": "object"
              },
              "newScenarioState": {
                "description": "The new state for the scenario to be updated to after this stub is served.",
                "type": "string"
              },
              "response": {"allOf": [
                {"oneOf": [
                  {
                    "description": "Log normal randomly distributed response delay.",
                    "title": "Log normal",
                    "type": "object",
                    "properties": {
                      "sigma": {"type": "number"},
                      "median": {"type": "integer"},
                      "type": {
                        "type": "string",
                        "enum": ["lognormal"]
                      }
                    }
                  },
                  {
                    "description": "Uniformly distributed random response delay.",
                    "title": "Uniform",
                    "type": "object",
                    "properties": {
                      "lower": {"type": "integer"},
                      "upper": {"type": "integer"},
                      "type": {
                        "type": "string",
                        "enum": ["uniform"]
                      }
                    }
                  }
                ]},
                {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "description": "Map of response headers to send",
                      "type": "object"
                    },
                    "transformers": {
                      "description": "List of names of transformers to apply to this response.",
                      "type": "array",
                      "items": {"type": "string"}
                    },
                    "fixedDelayMilliseconds": {
                      "description": "Number of milliseconds to delay be before sending the response.",
                      "type": "integer"
                    },
                    "fault": {
                      "description": "The fault to apply (instead of a full, valid response).",
                      "type": "string",
                      "enum": [
                        "CONNECTION_RESET_BY_PEER",
                        "EMPTY_RESPONSE",
                        "MALFORMED_RESPONSE_CHUNK",
                        "RANDOM_DATA_THEN_CLOSE"
                      ]
                    },
                    "jsonBody": {
                      "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "object"
                    },
                    "body": {
                      "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "fromConfiguredStub": {
                      "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                      "type": "boolean"
                    },
                    "statusMessage": {
                      "description": "The HTTP status message to be returned",
                      "type": "string"
                    },
                    "additionalProxyRequestHeaders": {
                      "description": "Extra request headers to send when proxying to another host.",
                      "type": "object"
                    },
                    "transformerParameters": {
                      "description": "Parameters to apply to response transformers.",
                      "type": "object"
                    },
                    "bodyFileName": {
                      "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "base64Body": {
                      "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The HTTP status code to be returned",
                      "type": "integer"
                    },
                    "proxyBaseUrl": {
                      "description": "The base URL of the target to proxy matching requests to.",
                      "type": "string"
                    }
                  }
                }
              ]},
              "name": {
                "description": "The stub mapping's name",
                "type": "string"
              },
              "postServeActions": {
                "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                "type": "object"
              },
              "requiredScenarioState": {
                "description": "The required state of the scenario in order for this stub to be matched.",
                "type": "string"
              },
              "id": {
                "description": "This stub mapping's unique identifier",
                "type": "string"
              },
              "persistent": {
                "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                "type": "boolean"
              },
              "priority": {
                "description": "This stub mapping's priority relative to others. 1 is highest.",
                "type": "integer",
                "minimum": 1
              },
              "uuid": {
                "description": "Alias for the id",
                "type": "string"
              },
              "scenarioName": {
                "description": "The name of the scenario that this stub mapping is part of",
                "type": "string"
              }
            }
          },
          "example": {
            "request": {
              "method": "GET",
              "url": "/some/thing"
            },
            "response": {
              "headers": {"Content-Type": "text/plain"},
              "body": "Hello world!",
              "status": 200
            }
          }
        }}},
        "responses": {"201": {
          "description": "The stub mapping",
          "content": {"application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "request": {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    },
                    "method": {
                      "description": "The HTTP request method e.g. GET",
                      "type": "string"
                    },
                    "queryParameters": {
                      "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    },
                    "basicAuthCredentials": {
                      "description": "Pre-emptive basic auth credentials to match against",
                      "type": "object",
                      "properties": {
                        "password": {"type": "string"},
                        "username": {"type": "string"}
                      },
                      "required": [
                        "username",
                        "password"
                      ]
                    },
                    "bodyPatterns": {
                      "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "array",
                      "items": {"type": "object"}
                    },
                    "urlPattern": {
                      "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "urlPath": {
                      "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "urlPathPattern": {
                      "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                      "type": "string"
                    },
                    "cookies": {
                      "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                      "type": "object"
                    }
                  },
                  "example": {
                    "headers": {"Content-Type": {"equalTo": "application/json"}},
                    "method": "POST",
                    "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                    "url": "/some/thing"
                  }
                },
                "metadata": {
                  "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                  "type": "object"
                },
                "newScenarioState": {
                  "description": "The new state for the scenario to be updated to after this stub is served.",
                  "type": "string"
                },
                "response": {"allOf": [
                  {"oneOf": [
                    {
                      "description": "Log normal randomly distributed response delay.",
                      "title": "Log normal",
                      "type": "object",
                      "properties": {
                        "sigma": {"type": "number"},
                        "median": {"type": "integer"},
                        "type": {
                          "type": "string",
                          "enum": ["lognormal"]
                        }
                      }
                    },
                    {
                      "description": "Uniformly distributed random response delay.",
                      "title": "Uniform",
                      "type": "object",
                      "properties": {
                        "lower": {"type": "integer"},
                        "upper": {"type": "integer"},
                        "type": {
                          "type": "string",
                          "enum": ["uniform"]
                        }
                      }
                    }
                  ]},
                  {
                    "type": "object",
                    "properties": {
                      "headers": {
                        "description": "Map of response headers to send",
                        "type": "object"
                      },
                      "transformers": {
                        "description": "List of names of transformers to apply to this response.",
                        "type": "array",
                        "items": {"type": "string"}
                      },
                      "fixedDelayMilliseconds": {
                        "description": "Number of milliseconds to delay be before sending the response.",
                        "type": "integer"
                      },
                      "fault": {
                        "description": "The fault to apply (instead of a full, valid response).",
                        "type": "string",
                        "enum": [
                          "CONNECTION_RESET_BY_PEER",
                          "EMPTY_RESPONSE",
                          "MALFORMED_RESPONSE_CHUNK",
                          "RANDOM_DATA_THEN_CLOSE"
                        ]
                      },
                      "jsonBody": {
                        "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                        "type": "object"
                      },
                      "body": {
                        "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                        "type": "string"
                      },
                      "fromConfiguredStub": {
                        "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                        "type": "boolean"
                      },
                      "statusMessage": {
                        "description": "The HTTP status message to be returned",
                        "type": "string"
                      },
                      "additionalProxyRequestHeaders": {
                        "description": "Extra request headers to send when proxying to another host.",
                        "type": "object"
                      },
                      "transformerParameters": {
                        "description": "Parameters to apply to response transformers.",
                        "type": "object"
                      },
                      "bodyFileName": {
                        "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                        "type": "string"
                      },
                      "base64Body": {
                        "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                        "type": "string"
                      },
                      "status": {
                        "description": "The HTTP status code to be returned",
                        "type": "integer"
                      },
                      "proxyBaseUrl": {
                        "description": "The base URL of the target to proxy matching requests to.",
                        "type": "string"
                      }
                    }
                  }
                ]},
                "name": {
                  "description": "The stub mapping's name",
                  "type": "string"
                },
                "postServeActions": {
                  "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                  "type": "object"
                },
                "requiredScenarioState": {
                  "description": "The required state of the scenario in order for this stub to be matched.",
                  "type": "string"
                },
                "id": {
                  "description": "This stub mapping's unique identifier",
                  "type": "string"
                },
                "persistent": {
                  "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                  "type": "boolean"
                },
                "priority": {
                  "description": "This stub mapping's priority relative to others. 1 is highest.",
                  "type": "integer",
                  "minimum": 1
                },
                "uuid": {
                  "description": "Alias for the id",
                  "type": "string"
                },
                "scenarioName": {
                  "description": "The name of the scenario that this stub mapping is part of",
                  "type": "string"
                }
              }
            },
            "example": {
              "request": {
                "headers": {"Accept": {"equalTo": "text/plain"}},
                "method": "GET",
                "url": "/some/thing"
              },
              "response": {
                "headers": {"Content-Type": "text/plain"},
                "body": "Hello world!",
                "status": 200
              },
              "id": "76ada7b0-49ae-4229-91c4-396a36f18e09",
              "priority": 3
            }
          }}
        }},
        "tags": ["Stub Mappings"]
      },
      "get": {
        "summary": "Get all stub mappings",
        "responses": {"200": {
          "description": "All stub mappings",
          "content": {"application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "mappings": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "request": {
                        "type": "object",
                        "properties": {
                          "headers": {
                            "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                            "type": "object"
                          },
                          "method": {
                            "description": "The HTTP request method e.g. GET",
                            "type": "string"
                          },
                          "queryParameters": {
                            "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                            "type": "object"
                          },
                          "basicAuthCredentials": {
                            "description": "Pre-emptive basic auth credentials to match against",
                            "type": "object",
                            "properties": {
                              "password": {"type": "string"},
                              "username": {"type": "string"}
                            },
                            "required": [
                              "username",
                              "password"
                            ]
                          },
                          "bodyPatterns": {
                            "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                            "type": "array",
                            "items": {"type": "object"}
                          },
                          "urlPattern": {
                            "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                            "type": "string"
                          },
                          "urlPath": {
                            "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                            "type": "string"
                          },
                          "urlPathPattern": {
                            "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                            "type": "string"
                          },
                          "url": {
                            "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                            "type": "string"
                          },
                          "cookies": {
                            "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                            "type": "object"
                          }
                        },
                        "example": {
                          "headers": {"Content-Type": {"equalTo": "application/json"}},
                          "method": "POST",
                          "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                          "url": "/some/thing"
                        }
                      },
                      "metadata": {
                        "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                        "type": "object"
                      },
                      "newScenarioState": {
                        "description": "The new state for the scenario to be updated to after this stub is served.",
                        "type": "string"
                      },
                      "response": {"allOf": [
                        {"oneOf": [
                          {
                            "description": "Log normal randomly distributed response delay.",
                            "title": "Log normal",
                            "type": "object",
                            "properties": {
                              "sigma": {"type": "number"},
                              "median": {"type": "integer"},
                              "type": {
                                "type": "string",
                                "enum": ["lognormal"]
                              }
                            }
                          },
                          {
                            "description": "Uniformly distributed random response delay.",
                            "title": "Uniform",
                            "type": "object",
                            "properties": {
                              "lower": {"type": "integer"},
                              "upper": {"type": "integer"},
                              "type": {
                                "type": "string",
                                "enum": ["uniform"]
                              }
                            }
                          }
                        ]},
                        {
                          "type": "object",
                          "properties": {
                            "headers": {
                              "description": "Map of response headers to send",
                              "type": "object"
                            },
                            "transformers": {
                              "description": "List of names of transformers to apply to this response.",
                              "type": "array",
                              "items": {"type": "string"}
                            },
                            "fixedDelayMilliseconds": {
                              "description": "Number of milliseconds to delay be before sending the response.",
                              "type": "integer"
                            },
                            "fault": {
                              "description": "The fault to apply (instead of a full, valid response).",
                              "type": "string",
                              "enum": [
                                "CONNECTION_RESET_BY_PEER",
                                "EMPTY_RESPONSE",
                                "MALFORMED_RESPONSE_CHUNK",
                                "RANDOM_DATA_THEN_CLOSE"
                              ]
                            },
                            "jsonBody": {
                              "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                              "type": "object"
                            },
                            "body": {
                              "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                              "type": "string"
                            },
                            "fromConfiguredStub": {
                              "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                              "type": "boolean"
                            },
                            "statusMessage": {
                              "description": "The HTTP status message to be returned",
                              "type": "string"
                            },
                            "additionalProxyRequestHeaders": {
                              "description": "Extra request headers to send when proxying to another host.",
                              "type": "object"
                            },
                            "transformerParameters": {
                              "description": "Parameters to apply to response transformers.",
                              "type": "object"
                            },
                            "bodyFileName": {
                              "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                              "type": "string"
                            },
                            "base64Body": {
                              "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                              "type": "string"
                            },
                            "status": {
                              "description": "The HTTP status code to be returned",
                              "type": "integer"
                            },
                            "proxyBaseUrl": {
                              "description": "The base URL of the target to proxy matching requests to.",
                              "type": "string"
                            }
                          }
                        }
                      ]},
                      "name": {
                        "description": "The stub mapping's name",
                        "type": "string"
                      },
                      "postServeActions": {
                        "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                        "type": "object"
                      },
                      "requiredScenarioState": {
                        "description": "The required state of the scenario in order for this stub to be matched.",
                        "type": "string"
                      },
                      "id": {
                        "description": "This stub mapping's unique identifier",
                        "type": "string"
                      },
                      "persistent": {
                        "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                        "type": "boolean"
                      },
                      "priority": {
                        "description": "This stub mapping's priority relative to others. 1 is highest.",
                        "type": "integer",
                        "minimum": 1
                      },
                      "uuid": {
                        "description": "Alias for the id",
                        "type": "string"
                      },
                      "scenarioName": {
                        "description": "The name of the scenario that this stub mapping is part of",
                        "type": "string"
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {"total": {
                    "type": "integer",
                    "example": 4
                  }},
                  "required": ["total"]
                }
              }
            },
            "example": {
              "mappings": [
                {
                  "request": {
                    "headers": {"Accept": {"equalTo": "application/json"}},
                    "method": "GET",
                    "url": "/search?q=things"
                  },
                  "response": {
                    "headers": {"Content-Type": "application/json"},
                    "jsonBody": [
                      "thing1",
                      "thing2"
                    ],
                    "status": 200
                  },
                  "id": "76ada7b0-49ae-4229-91c4-396a36f18e09",
                  "uuid": "76ada7b0-49ae-4229-91c4-396a36f18e09"
                },
                {
                  "request": {
                    "method": "POST",
                    "bodyPatterns": [{"equalToXml": "<stuff />"}],
                    "urlPath": "/some/things"
                  },
                  "response": {"status": 201}
                }
              ],
              "meta": {"total": 2}
            }
          }}
        }},
        "parameters": [
          {
            "schema": {"type": "integer"},
            "in": "query",
            "name": "limit",
            "description": "The maximum number of results to return",
            "required": false,
            "example": 10
          },
          {
            "schema": {"type": "integer"},
            "in": "query",
            "name": "offset",
            "description": "The start index of the results to return",
            "required": false,
            "example": 0
          }
        ],
        "tags": ["Stub Mappings"]
      },
      "delete": {
        "summary": "Delete all stub mappings",
        "responses": {"200": {"description": "Successfully deleted"}},
        "tags": ["Stub Mappings"]
      }
    },
    "/__admin/mappings/find-by-metadata": {"post": {
      "requestBody": {
        "content": {"application/json": {
          "schema": {"oneOf": [
            {
              "title": "String equals",
              "type": "object",
              "properties": {
                "equalTo": {"type": "boolean"},
                "caseInsensitive": {"type": "boolean"}
              },
              "required": ["equalTo"]
            },
            {
              "title": "String contains",
              "type": "object",
              "properties": {"contains": {"type": "string"}},
              "required": ["contains"]
            },
            {
              "title": "Regular expression match",
              "type": "object",
              "properties": {"matches": {"type": "string"}},
              "required": ["matches"]
            },
            {
              "title": "Negative regular expression match",
              "type": "object",
              "properties": {"doesNotMatch": {"type": "string"}},
              "required": ["doesNotMatch"]
            },
            {
              "title": "JSON equals",
              "type": "object",
              "properties": {"equalToJson": {"type": "string"}},
              "required": ["equalToJson"]
            },
            {
              "title": "JSONPath match",
              "type": "object",
              "properties": {
                "matchesJsonPath": {"type": "string"},
                "ignoreExtraElements": {"type": "boolean"},
                "ignoreArrayOrder": {"type": "boolean"}
              },
              "required": ["matchesJsonPath"]
            },
            {
              "title": "XML equality",
              "type": "object",
              "properties": {"equalToXml": {"type": "string"}},
              "required": ["equalToXml"]
            },
            {
              "title": "XPath match",
              "type": "object",
              "properties": {
                "matchesXpath": {"type": "string"},
                "valuePattern": {"type": "object"},
                "namespaces": {"type": "object"}
              },
              "required": ["matchesXpath"]
            }
          ]},
          "example": {"matchesJsonPath": {
            "equalToJson": "{ \"inner\": 42 }",
            "expression": "$.outer"
          }}
        }},
        "required": true
      },
      "description": "Find stubs by matching on their metadata",
      "responses": {"200": {
        "description": "Matched stub mappings",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "mappings": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "request": {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        },
                        "method": {
                          "description": "The HTTP request method e.g. GET",
                          "type": "string"
                        },
                        "queryParameters": {
                          "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        },
                        "basicAuthCredentials": {
                          "description": "Pre-emptive basic auth credentials to match against",
                          "type": "object",
                          "properties": {
                            "password": {"type": "string"},
                            "username": {"type": "string"}
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        },
                        "bodyPatterns": {
                          "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "array",
                          "items": {"type": "object"}
                        },
                        "urlPattern": {
                          "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "urlPath": {
                          "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "urlPathPattern": {
                          "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "url": {
                          "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "cookies": {
                          "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        }
                      },
                      "example": {
                        "headers": {"Content-Type": {"equalTo": "application/json"}},
                        "method": "POST",
                        "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                        "url": "/some/thing"
                      }
                    },
                    "metadata": {
                      "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                      "type": "object"
                    },
                    "newScenarioState": {
                      "description": "The new state for the scenario to be updated to after this stub is served.",
                      "type": "string"
                    },
                    "response": {"allOf": [
                      {"oneOf": [
                        {
                          "description": "Log normal randomly distributed response delay.",
                          "title": "Log normal",
                          "type": "object",
                          "properties": {
                            "sigma": {"type": "number"},
                            "median": {"type": "integer"},
                            "type": {
                              "type": "string",
                              "enum": ["lognormal"]
                            }
                          }
                        },
                        {
                          "description": "Uniformly distributed random response delay.",
                          "title": "Uniform",
                          "type": "object",
                          "properties": {
                            "lower": {"type": "integer"},
                            "upper": {"type": "integer"},
                            "type": {
                              "type": "string",
                              "enum": ["uniform"]
                            }
                          }
                        }
                      ]},
                      {
                        "type": "object",
                        "properties": {
                          "headers": {
                            "description": "Map of response headers to send",
                            "type": "object"
                          },
                          "transformers": {
                            "description": "List of names of transformers to apply to this response.",
                            "type": "array",
                            "items": {"type": "string"}
                          },
                          "fixedDelayMilliseconds": {
                            "description": "Number of milliseconds to delay be before sending the response.",
                            "type": "integer"
                          },
                          "fault": {
                            "description": "The fault to apply (instead of a full, valid response).",
                            "type": "string",
                            "enum": [
                              "CONNECTION_RESET_BY_PEER",
                              "EMPTY_RESPONSE",
                              "MALFORMED_RESPONSE_CHUNK",
                              "RANDOM_DATA_THEN_CLOSE"
                            ]
                          },
                          "jsonBody": {
                            "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "object"
                          },
                          "body": {
                            "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "fromConfiguredStub": {
                            "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                            "type": "boolean"
                          },
                          "statusMessage": {
                            "description": "The HTTP status message to be returned",
                            "type": "string"
                          },
                          "additionalProxyRequestHeaders": {
                            "description": "Extra request headers to send when proxying to another host.",
                            "type": "object"
                          },
                          "transformerParameters": {
                            "description": "Parameters to apply to response transformers.",
                            "type": "object"
                          },
                          "bodyFileName": {
                            "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "base64Body": {
                            "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The HTTP status code to be returned",
                            "type": "integer"
                          },
                          "proxyBaseUrl": {
                            "description": "The base URL of the target to proxy matching requests to.",
                            "type": "string"
                          }
                        }
                      }
                    ]},
                    "name": {
                      "description": "The stub mapping's name",
                      "type": "string"
                    },
                    "postServeActions": {
                      "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                      "type": "object"
                    },
                    "requiredScenarioState": {
                      "description": "The required state of the scenario in order for this stub to be matched.",
                      "type": "string"
                    },
                    "id": {
                      "description": "This stub mapping's unique identifier",
                      "type": "string"
                    },
                    "persistent": {
                      "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                      "type": "boolean"
                    },
                    "priority": {
                      "description": "This stub mapping's priority relative to others. 1 is highest.",
                      "type": "integer",
                      "minimum": 1
                    },
                    "uuid": {
                      "description": "Alias for the id",
                      "type": "string"
                    },
                    "scenarioName": {
                      "description": "The name of the scenario that this stub mapping is part of",
                      "type": "string"
                    }
                  }
                }
              },
              "meta": {
                "type": "object",
                "properties": {"total": {
                  "type": "integer",
                  "example": 4
                }},
                "required": ["total"]
              }
            }
          },
          "example": {
            "mappings": [
              {
                "request": {
                  "headers": {"Accept": {"equalTo": "application/json"}},
                  "method": "GET",
                  "url": "/search?q=things"
                },
                "response": {
                  "headers": {"Content-Type": "application/json"},
                  "jsonBody": [
                    "thing1",
                    "thing2"
                  ],
                  "status": 200
                },
                "id": "76ada7b0-49ae-4229-91c4-396a36f18e09",
                "uuid": "76ada7b0-49ae-4229-91c4-396a36f18e09"
              },
              {
                "request": {
                  "method": "POST",
                  "bodyPatterns": [{"equalToXml": "<stuff />"}],
                  "urlPath": "/some/things"
                },
                "response": {"status": 201}
              }
            ],
            "meta": {"total": 2}
          }
        }}
      }},
      "tags": ["Stub Mappings"]
    }},
    "/__admin/requests/remove-by-metadata": {"post": {
      "summary": "Delete requests mappings matching metadata",
      "requestBody": {"content": {"application/json": {
        "schema": {"oneOf": [
          {
            "title": "String equals",
            "type": "object",
            "properties": {
              "equalTo": {"type": "boolean"},
              "caseInsensitive": {"type": "boolean"}
            },
            "required": ["equalTo"]
          },
          {
            "title": "String contains",
            "type": "object",
            "properties": {"contains": {"type": "string"}},
            "required": ["contains"]
          },
          {
            "title": "Regular expression match",
            "type": "object",
            "properties": {"matches": {"type": "string"}},
            "required": ["matches"]
          },
          {
            "title": "Negative regular expression match",
            "type": "object",
            "properties": {"doesNotMatch": {"type": "string"}},
            "required": ["doesNotMatch"]
          },
          {
            "title": "JSON equals",
            "type": "object",
            "properties": {"equalToJson": {"type": "string"}},
            "required": ["equalToJson"]
          },
          {
            "title": "JSONPath match",
            "type": "object",
            "properties": {
              "matchesJsonPath": {"type": "string"},
              "ignoreExtraElements": {"type": "boolean"},
              "ignoreArrayOrder": {"type": "boolean"}
            },
            "required": ["matchesJsonPath"]
          },
          {
            "title": "XML equality",
            "type": "object",
            "properties": {"equalToXml": {"type": "string"}},
            "required": ["equalToXml"]
          },
          {
            "title": "XPath match",
            "type": "object",
            "properties": {
              "matchesXpath": {"type": "string"},
              "valuePattern": {"type": "object"},
              "namespaces": {"type": "object"}
            },
            "required": ["matchesXpath"]
          }
        ]},
        "example": {"matchesJsonPath": {
          "equalToJson": "{ \"inner\": 42 }",
          "expression": "$.outer"
        }}
      }}},
      "responses": {"200": {
        "description": "Removed request details",
        "content": {"application/json": {"example": {"requests": [
          {
            "headers": {
              "Accept": "image/png,image/*;q=0.8,*/*;q=0.5",
              "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0",
              "Accept-Language": "en-us,en;q=0.5"
            },
            "method": "GET",
            "browserProxyRequest": true,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://mydomain.com/my/url",
            "body": "",
            "loggedDate": 1339083581823,
            "url": "/my/url"
          },
          {
            "headers": {
              "Accept": "text/plain",
              "Content-Type": "text/plain"
            },
            "method": "POST",
            "browserProxyRequest": false,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://my.other.domain.com/my/other/url",
            "body": "My text",
            "loggedDate": 1339083581823,
            "url": "/my/other/url"
          }
        ]}}}
      }},
      "tags": ["Requests"]
    }},
    "/__admin/recordings/stop": {"post": {
      "summary": "Stop recording",
      "description": "End recording of stub mappings",
      "responses": {"200": {
        "description": "Successfully stopped recording",
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "mappings": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "request": {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        },
                        "method": {
                          "description": "The HTTP request method e.g. GET",
                          "type": "string"
                        },
                        "queryParameters": {
                          "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        },
                        "basicAuthCredentials": {
                          "description": "Pre-emptive basic auth credentials to match against",
                          "type": "object",
                          "properties": {
                            "password": {"type": "string"},
                            "username": {"type": "string"}
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        },
                        "bodyPatterns": {
                          "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "array",
                          "items": {"type": "object"}
                        },
                        "urlPattern": {
                          "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "urlPath": {
                          "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "urlPathPattern": {
                          "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "url": {
                          "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                          "type": "string"
                        },
                        "cookies": {
                          "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                          "type": "object"
                        }
                      },
                      "example": {
                        "headers": {"Content-Type": {"equalTo": "application/json"}},
                        "method": "POST",
                        "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
                        "url": "/some/thing"
                      }
                    },
                    "metadata": {
                      "description": "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.",
                      "type": "object"
                    },
                    "newScenarioState": {
                      "description": "The new state for the scenario to be updated to after this stub is served.",
                      "type": "string"
                    },
                    "response": {"allOf": [
                      {"oneOf": [
                        {
                          "description": "Log normal randomly distributed response delay.",
                          "title": "Log normal",
                          "type": "object",
                          "properties": {
                            "sigma": {"type": "number"},
                            "median": {"type": "integer"},
                            "type": {
                              "type": "string",
                              "enum": ["lognormal"]
                            }
                          }
                        },
                        {
                          "description": "Uniformly distributed random response delay.",
                          "title": "Uniform",
                          "type": "object",
                          "properties": {
                            "lower": {"type": "integer"},
                            "upper": {"type": "integer"},
                            "type": {
                              "type": "string",
                              "enum": ["uniform"]
                            }
                          }
                        }
                      ]},
                      {
                        "type": "object",
                        "properties": {
                          "headers": {
                            "description": "Map of response headers to send",
                            "type": "object"
                          },
                          "transformers": {
                            "description": "List of names of transformers to apply to this response.",
                            "type": "array",
                            "items": {"type": "string"}
                          },
                          "fixedDelayMilliseconds": {
                            "description": "Number of milliseconds to delay be before sending the response.",
                            "type": "integer"
                          },
                          "fault": {
                            "description": "The fault to apply (instead of a full, valid response).",
                            "type": "string",
                            "enum": [
                              "CONNECTION_RESET_BY_PEER",
                              "EMPTY_RESPONSE",
                              "MALFORMED_RESPONSE_CHUNK",
                              "RANDOM_DATA_THEN_CLOSE"
                            ]
                          },
                          "jsonBody": {
                            "description": "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "object"
                          },
                          "body": {
                            "description": "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "fromConfiguredStub": {
                            "description": "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.",
                            "type": "boolean"
                          },
                          "statusMessage": {
                            "description": "The HTTP status message to be returned",
                            "type": "string"
                          },
                          "additionalProxyRequestHeaders": {
                            "description": "Extra request headers to send when proxying to another host.",
                            "type": "object"
                          },
                          "transformerParameters": {
                            "description": "Parameters to apply to response transformers.",
                            "type": "object"
                          },
                          "bodyFileName": {
                            "description": "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "base64Body": {
                            "description": "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The HTTP status code to be returned",
                            "type": "integer"
                          },
                          "proxyBaseUrl": {
                            "description": "The base URL of the target to proxy matching requests to.",
                            "type": "string"
                          }
                        }
                      }
                    ]},
                    "name": {
                      "description": "The stub mapping's name",
                      "type": "string"
                    },
                    "postServeActions": {
                      "description": "A map of the names of post serve action extensions to trigger and their parameters.",
                      "type": "object"
                    },
                    "requiredScenarioState": {
                      "description": "The required state of the scenario in order for this stub to be matched.",
                      "type": "string"
                    },
                    "id": {
                      "description": "This stub mapping's unique identifier",
                      "type": "string"
                    },
                    "persistent": {
                      "description": "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.",
                      "type": "boolean"
                    },
                    "priority": {
                      "description": "This stub mapping's priority relative to others. 1 is highest.",
                      "type": "integer",
                      "minimum": 1
                    },
                    "uuid": {
                      "description": "Alias for the id",
                      "type": "string"
                    },
                    "scenarioName": {
                      "description": "The name of the scenario that this stub mapping is part of",
                      "type": "string"
                    }
                  }
                }
              },
              "meta": {
                "type": "object",
                "properties": {"total": {
                  "type": "integer",
                  "example": 4
                }},
                "required": ["total"]
              }
            }
          },
          "example": {"mappings": [{
            "request": {
              "method": "GET",
              "url": "/recordables/123"
            },
            "response": {
              "headers": {"Content-Type": "application/json"},
              "body": "{\n  \"message\": \"Congratulations on your first recording!\"\n}",
              "status": 200
            },
            "name": "recordables_123",
            "id": "093f1027-e5e0-4921-9e6d-e619dfd5d2c7",
            "persistent": true,
            "uuid": "093f1027-e5e0-4921-9e6d-e619dfd5d2c7"
          }]}
        }}
      }},
      "tags": ["Recordings"]
    }},
    "/__admin/requests/find": {"post": {
      "summary": "Find requests by criteria",
      "requestBody": {
        "required": true,
        "content": {"application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "headers": {
                "description": "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "method": {
                "description": "The HTTP request method e.g. GET",
                "type": "string"
              },
              "queryParameters": {
                "description": "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              },
              "basicAuthCredentials": {
                "description": "Pre-emptive basic auth credentials to match against",
                "type": "object",
                "properties": {
                  "password": {"type": "string"},
                  "username": {"type": "string"}
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "bodyPatterns": {
                "description": "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "array",
                "items": {"type": "object"}
              },
              "urlPattern": {
                "description": "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPath": {
                "description": "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "urlPathPattern": {
                "description": "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "url": {
                "description": "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.",
                "type": "string"
              },
              "cookies": {
                "description": "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "type": "object"
              }
            },
            "example": {
              "headers": {"Content-Type": {"equalTo": "application/json"}},
              "method": "POST",
              "bodyPatterns": [{"equalToJson": "{ \"numbers\": [1, 2, 3] }"}],
              "url": "/some/thing"
            }
          },
          "example": {
            "headers": {"Content-Type": {"matches": ".*/xml"}},
            "method": "POST",
            "url": "/resource"
          }
        }}
      },
      "description": "Retrieve details of requests logged in the journal matching the specified criteria",
      "responses": {"200": {
        "description": "Matching request details",
        "content": {"application/json": {"example": {"requests": [
          {
            "headers": {
              "Accept": "image/png,image/*;q=0.8,*/*;q=0.5",
              "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0",
              "Accept-Language": "en-us,en;q=0.5"
            },
            "method": "GET",
            "browserProxyRequest": true,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://mydomain.com/my/url",
            "body": "",
            "loggedDate": 1339083581823,
            "url": "/my/url"
          },
          {
            "headers": {
              "Accept": "text/plain",
              "Content-Type": "text/plain"
            },
            "method": "POST",
            "browserProxyRequest": false,
            "loggedDateString": "2012-06-07 16:39:41",
            "absoluteUrl": "http://my.other.domain.com/my/other/url",
            "body": "My text",
            "loggedDate": 1339083581823,
            "url": "/my/other/url"
          }
        ]}}}
      }},
      "tags": ["Requests"]
    }},
    "/__admin/settings": {"post": {
      "summary": "Update global settings",
      "requestBody": {
        "content": {"application/json": {"schema": {"allOf": [
          {"oneOf": [
            {
              "description": "Log normal randomly distributed response delay.",
              "title": "Log normal",
              "type": "object",
              "properties": {
                "sigma": {"type": "number"},
                "median": {"type": "integer"},
                "type": {
                  "type": "string",
                  "enum": ["lognormal"]
                }
              }
            },
            {
              "description": "Uniformly distributed random response delay.",
              "title": "Uniform",
              "type": "object",
              "properties": {
                "lower": {"type": "integer"},
                "upper": {"type": "integer"},
                "type": {
                  "type": "string",
                  "enum": ["uniform"]
                }
              }
            }
          ]},
          {
            "type": "object",
            "properties": {"fixedDelay": {"type": "number"}},
            "example": {"fixedDelay": 500}
          }
        ]}}},
        "required": true
      },
      "responses": {"200": {"description": "Settings successfully updated"}},
      "tags": ["System"]
    }},
    "/__admin/scenarios": {"get": {
      "summary": "Get all scenarios",
      "responses": {"200": {
        "description": "All scenarios",
        "content": {"application/json": {"schema": {
          "type": "object",
          "properties": {"scenarios": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "The scenario name",
                  "type": "string",
                  "example": "my_scenario"
                },
                "possibleStates": {
                  "type": "array",
                  "items": {
                    "default": "Started",
                    "description": "All the states this scenario can be in",
                    "type": "string"
                  },
                  "example": [
                    "Started",
                    "state_1",
                    "state_2"
                  ]
                },
                "id": {
                  "description": "The scenario ID",
                  "type": "string",
                  "example": "c8d249ec-d86d-48b1-88a8-a660e6848042"
                },
                "state": {
                  "default": "Started",
                  "description": "The current state of this scenario",
                  "type": "string",
                  "example": "state_2"
                }
              }
            }
          }}
        }}}
      }},
      "tags": ["Scenarios"]
    }},
    "/__admin/mappings/remove-by-metadata": {"post": {
      "summary": "Delete stub mappings matching metadata",
      "requestBody": {"content": {"application/json": {
        "schema": {"oneOf": [
          {
            "title": "String equals",
            "type": "object",
            "properties": {
              "equalTo": {"type": "boolean"},
              "caseInsensitive": {"type": "boolean"}
            },
            "required": ["equalTo"]
          },
          {
            "title": "String contains",
            "type": "object",
            "properties": {"contains": {"type": "string"}},
            "required": ["contains"]
          },
          {
            "title": "Regular expression match",
            "type": "object",
            "properties": {"matches": {"type": "string"}},
            "required": ["matches"]
          },
          {
            "title": "Negative regular expression match",
            "type": "object",
            "properties": {"doesNotMatch": {"type": "string"}},
            "required": ["doesNotMatch"]
          },
          {
            "title": "JSON equals",
            "type": "object",
            "properties": {"equalToJson": {"type": "string"}},
            "required": ["equalToJson"]
          },
          {
            "title": "JSONPath match",
            "type": "object",
            "properties": {
              "matchesJsonPath": {"type": "string"},
              "ignoreExtraElements": {"type": "boolean"},
              "ignoreArrayOrder": {"type": "boolean"}
            },
            "required": ["matchesJsonPath"]
          },
          {
            "title": "XML equality",
            "type": "object",
            "properties": {"equalToXml": {"type": "string"}},
            "required": ["equalToXml"]
          },
          {
            "title": "XPath match",
            "type": "object",
            "properties": {
              "matchesXpath": {"type": "string"},
              "valuePattern": {"type": "object"},
              "namespaces": {"type": "object"}
            },
            "required": ["matchesXpath"]
          }
        ]},
        "example": {"matchesJsonPath": {
          "equalToJson": "{ \"inner\": 42 }",
          "expression": "$.outer"
        }}
      }}},
      "responses": {"200": {"description": "The stub mappings were successfully removed"}},
      "tags": ["Stub Mappings"]
    }}
  },
  "externalDocs": {
    "description": "WireMock user documentation",
    "url": "http://wiremock.org/docs/"
  },
  "info": {
    "title": "WireMock",
    "version": "2.32.0"
  },
  "tags": [
    {
      "name": "Stub Mappings",
      "description": "Operations on stub mappings",
      "externalDocs": {
        "description": "User documentation",
        "url": "http://wiremock.org/docs/stubbing/"
      }
    },
    {
      "name": "Requests",
      "description": "Logged requests and responses received by the mock service",
      "externalDocs": {
        "description": "User documentation",
        "url": "http://wiremock.org/docs/verifying/"
      }
    },
    {
      "name": "Near Misses",
      "description": "Near misses allow querying of received requests or request patterns according to similarity",
      "externalDocs": {
        "description": "User documentation",
        "url": "http://wiremock.org/docs/verifying/#near-misses"
      }
    },
    {
      "name": "Recordings",
      "description": "Stub mapping record and snapshot functions",
      "externalDocs": {
        "description": "User documentation",
        "url": "http://wiremock.org/docs/record-playback/"
      }
    },
    {
      "name": "Scenarios",
      "description": "Scenarios support modelling of stateful behaviour",
      "externalDocs": {
        "description": "User documentation",
        "url": "http://wiremock.org/docs/stateful-behaviour/"
      }
    },
    {
      "name": "System",
      "description": "Global operations"
    }
  ]
}
