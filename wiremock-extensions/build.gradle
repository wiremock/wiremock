buildscript {
  repositories {
    maven {
      url "https://oss.sonatype.org"
    }
    mavenCentral()
  }
}

plugins {
  id 'java-library'
  id 'java-test-fixtures'
  id 'signing'
  id 'maven-publish'
  id 'com.diffplug.spotless' version '6.25.0'
  id "org.sonarqube" version "6.0.1.5171"
  id 'jacoco'
}

group 'org.wiremock'

java {
  sourceCompatibility = 11
  targetCompatibility = 11
  withSourcesJar()
  withJavadocJar()
}

project.ext {
  versions = [
    handlebars     : '4.3.1',
    jetty          : '11.0.24',
    guava          : '33.4.0-jre',
    jackson        : '2.18.2',
    xmlUnit        : '2.10.0',
    jsonUnit       : '2.40.1',
    junitJupiter   : '5.11.4'
  ]
}

dependencies {
  api platform("org.eclipse.jetty:jetty-bom:$versions.jetty")
  api "org.eclipse.jetty:jetty-server"
  api "org.eclipse.jetty:jetty-servlet"
  api "org.eclipse.jetty:jetty-servlets"
  api "org.eclipse.jetty:jetty-webapp"
  api "org.eclipse.jetty:jetty-proxy"
  api "org.eclipse.jetty.http2:http2-server"
  api "org.eclipse.jetty:jetty-alpn-server"
  api "org.eclipse.jetty:jetty-alpn-java-server"
  api "org.eclipse.jetty:jetty-alpn-java-client"
  api "org.eclipse.jetty:jetty-alpn-client"

  api "com.google.guava:guava:$versions.guava", {
    exclude group: 'com.google.code.findbugs', module: 'jsr305'
  }
  api platform("com.fasterxml.jackson:jackson-bom:$versions.jackson")
  api "com.fasterxml.jackson.core:jackson-core",
      "com.fasterxml.jackson.core:jackson-annotations",
      "com.fasterxml.jackson.core:jackson-databind",
      "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  api "org.apache.httpcomponents.client5:httpclient5:5.4.2"
  api "org.xmlunit:xmlunit-core:$versions.xmlUnit"
  api "org.xmlunit:xmlunit-legacy:$versions.xmlUnit", {
    exclude group: 'junit', module: 'junit'
  }
  api "org.xmlunit:xmlunit-placeholders:$versions.xmlUnit"
  api "net.javacrumbs.json-unit:json-unit-core:$versions.jsonUnit"
  api "com.jayway.jsonpath:json-path:2.9.0", {
    exclude group: 'org.ow2.asm', module: 'asm'
  }

  implementation "org.slf4j:slf4j-api:1.7.36"

  api "net.sf.jopt-simple:jopt-simple:5.0.4"

  compileOnly("junit:junit:4.13.2") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
  }
  compileOnly(platform("org.junit:junit-bom:$versions.junitJupiter"))
  compileOnly("org.junit.jupiter:junit-jupiter")

  api "com.github.jknack:handlebars:$versions.handlebars", {
    exclude group: 'org.mozilla', module: 'rhino'
  }
  api("com.github.jknack:handlebars-helpers:$versions.handlebars") {
    exclude group: 'org.mozilla', module: 'rhino'
    exclude group: 'org.apache.commons', module: 'commons-lang3'
  }

  api 'commons-fileupload:commons-fileupload:1.5'

  api 'com.networknt:json-schema-validator:1.5.5'

  testFixturesApi("org.junit.jupiter:junit-jupiter:$versions.junitJupiter")
  testFixturesApi("org.junit.platform:junit-platform-testkit")
  testFixturesApi("org.junit.platform:junit-platform-launcher")
  testFixturesApi("org.junit.jupiter:junit-jupiter-params")
  testFixturesApi('org.junit-pioneer:junit-pioneer:2.3.0')
  testFixturesApi "org.hamcrest:hamcrest-core:3.0"
  testFixturesApi "org.hamcrest:hamcrest-library:3.0"
  testFixturesApi 'org.mockito:mockito-core:5.15.2'
  testFixturesApi 'org.mockito:mockito-junit-jupiter:5.15.2'
  testFixturesApi "net.javacrumbs.json-unit:json-unit:$versions.jsonUnit"
  testFixturesApi "org.skyscreamer:jsonassert:1.5.1"
  testFixturesApi 'com.toomuchcoding.jsonassert:jsonassert:0.8.0'
  testFixturesApi 'org.awaitility:awaitility:4.2.2'
  testFixturesApi "commons-io:commons-io:2.18.0"

  testImplementation "junit:junit:4.13.2"
  testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
  testImplementation 'org.scala-lang:scala-library:2.13.16'
  testImplementation 'com.tngtech.archunit:archunit-junit5:0.23.1'

  testImplementation "org.eclipse.jetty:jetty-client"
  testImplementation "org.eclipse.jetty.http2:http2-http-client-transport"
  testRuntimeOnly files('src/test/resources/classpath file source/classpathfiles.zip', 'src/test/resources/classpath-filesource.jar')

  testImplementation files('test-extension/test-extension.jar')

  testImplementation 'org.openjdk.jmh:jmh-core:1.37'
  testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.37'

  constraints {
    implementation "net.minidev:json-smart:2.5.2", {
      because 'Pinning this above the transitive version from json-path to get CVE fix'
    }
  }
}

jar {
  archiveBaseName.set('wiremock-jetty11')
  manifest {
    attributes("Implementation-Version": project.version)
    attributes("Implementation-Title": "WireMock with Jetty 11")
  }
}

javadoc {
  exclude "**/CertificateAuthority.java"
  options.addStringOption('Xdoclint:none', '-quiet')
}

signing {
  required {
    !version.toString().contains("SNAPSHOT") && (gradle.taskGraph.hasTask("uploadArchives") || gradle.taskGraph.hasTask("publish"))
  }
  def signingKey = providers.environmentVariable("OSSRH_GPG_SECRET_KEY").orElse("").get()
  def signingPassphrase = providers.environmentVariable("OSSRH_GPG_SECRET_KEY_PASSWORD").orElse("").get()
  if (!signingKey.isEmpty() && !signingPassphrase.isEmpty()) {
    useInMemoryPgpKeys(signingKey, signingPassphrase)
  }
  sign publishing.publications
}

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/wiremock/wiremock"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }

  publications {
    mavenJava(MavenPublication) { publication ->
      artifactId = "${jar.getArchiveBaseName().get()}"
      from components.java

      pom.withXml {
        asNode().appendNode('description', 'WireMock with Jetty 11 as its HTTP server')
        asNode().children().last() + pomInfo
      }
    }
  }
}

task localRelease {
  dependsOn clean, assemble, publishToMavenLocal
}

test {
  useJUnitPlatform()

  maxParallelForks = runningOnCI ? 1 : 3

  testLogging {
    events "FAILED", "SKIPPED"
    exceptionFormat "full"
  }
}
